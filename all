import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter/material.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'package:connectivity_plus/connectivity_plus.dart'; // --- إضافة: للتحقق من الاتصال ---
import 'package:responsive_framework/responsive_framework.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:google_fonts/google_fonts.dart';
import 'config.dart';
import 'screens/home_screen.dart';
import 'screens/initial_hub_screen.dart';
import 'services/notification_service.dart';
import 'firebase_options.dart';
import 'widgets/app_dialogs.dart'; // --- إضافة: للوصول إلى نوافذ الحوار ---

// مفتاح الملاح العام للوصول إلى Navigator من خارج واجهة المستخدم
final GlobalKey<NavigatorState> navigatorKey = GlobalKey<NavigatorState>();

@pragma('vm:entry-point')
Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );
  print("Handling a background message: ${message.messageId}");
}

// --- إضافة: دالة للتحقق من الاتصال بالإنترنت ---
Future<bool> checkInternetConnection() async {
  var connectivityResult = await (Connectivity().checkConnectivity());
  // --- تعديل: التحقق من جميع أنواع الاتصال ---
  if (connectivityResult.contains(ConnectivityResult.mobile) ||
      connectivityResult.contains(ConnectivityResult.wifi) ||
      connectivityResult.contains(ConnectivityResult.ethernet)) {
    return true;
  }
  return false;
}

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();

  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );
  FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);

  await Supabase.initialize(
    url: supabaseUrl,
    anonKey: supabaseAnonKey,
  );
  
  // --- تعديل: التحقق من الإنترنت قبل محاولة تسجيل الدخول ---
  if (await checkInternetConnection()) {
    if (Supabase.instance.client.auth.currentSession == null) {
      try {
        await Supabase.instance.client.auth.signInAnonymously();
      } catch (e) {
        print("Error signing in anonymously: $e");
      }
    }
  }

  if (Supabase.instance.client.auth.currentSession != null) {
    await NotificationService().init(navigatorKey);
  }

  final prefs = await SharedPreferences.getInstance();
  final bool isHubSetupComplete = prefs.getBool('hub_setup_complete') ?? false;

  runApp(DevNestApp(isHubSetupComplete: isHubSetupComplete));
}

class DevNestApp extends StatelessWidget {
  final bool isHubSetupComplete;
  const DevNestApp({super.key, required this.isHubSetupComplete});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      navigatorKey: navigatorKey,
      builder: (context, child) => ResponsiveBreakpoints.builder(
        child: Directionality(
          textDirection: TextDirection.rtl,
          child: Builder(
            // --- إضافة: فحص الاتصال عند بدء التشغيل ---
            builder: (context) {
              return FutureBuilder<bool>(
                future: checkInternetConnection(),
                builder: (context, snapshot) {
                  if (snapshot.connectionState == ConnectionState.waiting) {
                    return const Scaffold(body: Center(child: CircularProgressIndicator()));
                  }
                  if (snapshot.data == false) {
                     // استخدام WidgetsBinding لعرض الحوار بعد بناء الواجهة
                    WidgetsBinding.instance.addPostFrameCallback((_) {
                      showNoInternetDialog(context, () {
                         // إعادة بناء التطبيق عند الضغط على إعادة المحاولة
                         (context as Element).reassemble();
                      });
                    });
                    // عرض واجهة فارغة أثناء ظهور الحوار
                    return const Scaffold(body: Center(child: Text("لا يوجد اتصال بالإنترنت")));
                  }
                  return child!;
                },
              );
            },
          ),
        ),
        breakpoints: [
          const Breakpoint(start: 0, end: 450, name: MOBILE),
          const Breakpoint(start: 451, end: 800, name: TABLET),
          const Breakpoint(start: 801, end: 1920, name: DESKTOP),
          const Breakpoint(start: 1921, end: double.infinity, name: '4K'),
        ],
      ),
      title: 'Dev Nest',
      debugShowCheckedModeBanner: false,
      locale: const Locale('ar'),
      supportedLocales: const [
        Locale('ar'),
      ],
      localizationsDelegates: const [
        GlobalMaterialLocalizations.delegate,
        GlobalWidgetsLocalizations.delegate,
        GlobalCupertinoLocalizations.delegate,
      ],
      theme: ThemeData(
        brightness: Brightness.dark,
        primaryColor: const Color(0xFF9F70FD),
        scaffoldBackgroundColor: const Color(0xFF1A1B26),
        cardColor: const Color(0xFF2A2D3E),
        textTheme: GoogleFonts.cairoTextTheme(ThemeData.dark().textTheme),
        appBarTheme: const AppBarTheme(
          backgroundColor: Color(0xFF2A2D3E),
          elevation: 0,
        ),
        floatingActionButtonTheme: const FloatingActionButtonThemeData(
          backgroundColor: Color(0xFF9F70FD),
          foregroundColor: Colors.white,
        ),
        inputDecorationTheme: InputDecorationTheme(
          filled: true,
          fillColor: const Color(0xFF1A1B26),
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(12),
            borderSide: BorderSide(color: Colors.grey.shade800),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(12),
            borderSide: const BorderSide(color: Color(0xFF9F70FD)),
          ),
        ),
        elevatedButtonTheme: ElevatedButtonThemeData(
          style: ElevatedButton.styleFrom(
            backgroundColor: const Color(0xFF9F70FD),
            foregroundColor: Colors.white,
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(12),
            ),
            padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 24),
          ),
        ),
        outlinedButtonTheme: OutlinedButtonThemeData(
            style: OutlinedButton.styleFrom(
          side: const BorderSide(color: Color(0xFF9F70FD)),
          foregroundColor: const Color(0xFF9F70FD),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
          padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 24),
        )),
        dialogTheme: DialogThemeData(
          backgroundColor: const Color(0xFF2A2D3E),
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        ),
        chipTheme: ChipThemeData(
          backgroundColor: const Color(0xFF9F70FD).withOpacity(0.2),
          labelStyle: const TextStyle(color: Color(0xFF9F70FD), fontWeight: FontWeight.bold),
          side: BorderSide.none,
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
        ),
        tabBarTheme: TabBarThemeData(
          indicator: const BoxDecoration(
            border: Border(
              bottom: BorderSide(
                color: Color(0xFF9F70FD),
                width: 2.5,
              ),
            ),
          ),
          labelColor: const Color(0xFF9F70FD),
          unselectedLabelColor: Colors.grey.shade400,
        )
      ),
      home: isHubSetupComplete ? HomeScreen(key: homeScreenKey) : const InitialHubScreen(),
    );
  }
}

// TODO: قم باستبدال هذه القيم بالقيم الحقيقية من مشروع Supabase الخاص بك
const String supabaseUrl = 'https://xnnrwrepzpsstasbkvpb.supabase.co';
const String supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhubnJ3cmVwenBzc3Rhc2JrdnBiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTcyMzEyMTYsImV4cCI6MjA3MjgwNzIxNn0.Ei2vDFIlzaf5ff-51VDjmwGXY7_mChZzG3a1mdwkliM';

// TODO: قم بوضع قائمة مفاتيح API الخمسة الخاصة بـ Gemini هنا
const List<String> geminiApiKeys = [
  'AIzaSyBLTMl8MdF2MUqVDWj5ehHHEKBV-nRCqzU', // المفتاح الأول
  'AIzaSyCBwfDcj1oy1Vjj7mD_CmNgXcDBkCv_VG8', // المفتاح الثاني
  'AIzaSyC3rfq3F3hNsfOWYyV2ytCaJjz1hRaY3GQ', // المفتاح الثالث
  'AIzaSyCVRAu3yS-zExWcrMvm4FV8Z61YzlOFdGE', // المفتاح الرابع
  'AIzaSyA2BD_Dm1xirzdrQp9wgXDCR5QaH4D2n0I', // المفتاح الخامس
];
import 'dart:convert';
import 'package:flutter/material.dart';
import '../models/bug.dart';
import '../models/project.dart';
import '../services/gemini_service.dart';
import '../services/github_service.dart';
import '../services/supabase_service.dart';
import '../widgets/app_dialogs.dart';

// نموذج بسيط لتخزين نتائج الفحص
class AuditResult {
  final String title;
  final String description;
  final String type;
  bool isAdded = false;

  AuditResult(
      {required this.title, required this.description, required this.type});

  factory AuditResult.fromJson(Map<String, dynamic> json) {
    return AuditResult(
      title: json['title'] ?? 'بدون عنوان',
      description: json['description'] ?? 'لا يوجد وصف',
      type: json['type'] ?? 'بسيط',
    );
  }
}

class AiAuditDialog extends StatefulWidget {
  final Project project;
  final VoidCallback onBugsAdded;

  const AiAuditDialog(
      {super.key, required this.project, required this.onBugsAdded});

  @override
  State<AiAuditDialog> createState() => _AiAuditDialogState();
}

class _AiAuditDialogState extends State<AiAuditDialog> {
  String _auditType = 'bugs'; // 'bugs' or 'enhancements'
  String _state = 'idle'; // idle, loading_code, auditing, results, error
  String? _errorMessage;
  String _statusMessage = '';
  List<AuditResult> _results = [];

  final GeminiService _geminiService = GeminiService();
  final GitHubService _githubService = GitHubService();
  final SupabaseService _supabaseService = SupabaseService();

  Future<void> _startAudit() async {
    if (widget.project.githubUrl == null ||
        widget.project.githubUrl!.isEmpty) {
      setState(() {
        _state = 'error';
        _errorMessage = 'لا يمكن فحص المشروع. لم يتم ربطه بمستودع GitHub.';
      });
      return;
    }

    setState(() {
      _state = 'loading_code';
       _statusMessage = 'جاري تحميل الكود من GitHub...';
    });
    try {
      final codeContext =
          await _githubService.fetchRepositoryCodeAsString(widget.project.githubUrl!);

      setState(() {
        _state = 'auditing';
        _statusMessage = 'الذكاء الاصطناعي يقوم بالفحص الآن...';
      });
      
      final List<Bug> existingBugs = 
          await _supabaseService.getBugsForProject(widget.project.id);
      
      // ✅ --- (مُعدَّل) الآن يمرر دالة callback لتحديث الواجهة ---
      final jsonResponse = await _geminiService.performCodeAudit(
        codeContext: codeContext,
        auditType: _auditType,
        existingBugs: existingBugs,
        onStatusUpdate: (message) {
          if (mounted) {
            setState(() => _statusMessage = message);
          }
        },
      );

      final List<dynamic> decodedJson = jsonDecode(jsonResponse);
      setState(() {
        _results =
            decodedJson.map((item) => AuditResult.fromJson(item)).toList();
        _state = 'results';
      });
    } catch (e) {
      if (mounted) {
        if (e is AllApiKeysFailedException) {
            showServiceUnavailableDialog(context, e.message);
        } else {
            showTryAgainLaterDialog(context);
        }
        setState(() => _state = 'idle');
      }
    }
  }

  Future<void> _addResultToBugs(AuditResult result) async {
    try {
      final bugData = {
        'title': result.title,
        'description': result.description,
        'type': result.type,
        'project_id': widget.project.id,
        'status': 'جاري',
        'source': 'ai',
      };
      await _supabaseService.addBug(bugData);
      setState(() {
        result.isAdded = true;
      });
      widget.onBugsAdded(); 
    } catch (e) {
      if (mounted) {
        showErrorDialog(context, 'فشل إضافة العنصر: $e');
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: const Text('فحص ذكي للكود'),
      content: SizedBox(
        width: MediaQuery.of(context).size.width * 0.8,
        height: MediaQuery.of(context).size.height * 0.7,
        child: _buildContent(),
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.of(context).pop(),
          child: const Text('إغلاق'),
        ),
      ],
    );
  }

  /// ✅ --- (مُعدَّل) الآن يعرض رسائل الحالة للمستخدم ---
  Widget _buildContent() {
    switch (_state) {
      case 'idle':
        return _buildIdleView();
      case 'loading_code':
      case 'auditing':
        return Center(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              const CircularProgressIndicator(),
              const SizedBox(height: 16),
              Text(_statusMessage, textAlign: TextAlign.center),
            ],
          ),
        );
      case 'error':
        return Center(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              const Icon(Icons.error_outline, color: Colors.red, size: 48),
              const SizedBox(height: 16),
              Text(
                'حدث خطأ',
                style: Theme.of(context).textTheme.titleLarge,
              ),
              const SizedBox(height: 8),
              Text(_errorMessage ?? 'خطأ غير معروف', textAlign: TextAlign.center),
            ],
          ),
        );
      case 'results':
        return _buildResultsView();
      default:
        return const SizedBox.shrink();
    }
  }

  Widget _buildIdleView() {
    return Column(
      mainAxisAlignment: MainAxisAlignment.center,
      crossAxisAlignment: CrossAxisAlignment.stretch,
      children: [
        const Text(
          'اختر نوع الفحص الذي تريد إجراءه على الكود:',
          textAlign: TextAlign.center,
        ),
        const SizedBox(height: 24),
        SegmentedButton<String>(
          segments: const [
            ButtonSegment(value: 'bugs', label: Text('بحث عن أخطاء')),
            ButtonSegment(value: 'enhancements', label: Text('اقتراح تحسينات')),
          ],
          selected: {_auditType},
          onSelectionChanged: (newSelection) {
            setState(() {
              _auditType = newSelection.first;
            });
          },
        ),
        const SizedBox(height: 24),
        ElevatedButton.icon(
          icon: const Icon(Icons.auto_fix_high),
          label: const Text('ابدأ الفحص'),
          onPressed: _startAudit,
        ),
      ],
    );
  }

  Widget _buildResultsView() {
    if (_results.isEmpty) {
      return const Center(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
             Icon(Icons.check_circle_outline, color: Colors.green, size: 48),
             SizedBox(height: 16),
             Text('رائع! لم يتم العثور على أي مشاكل جديدة.'),
          ],
        ),
      );
    }
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'تم العثور على ${_results.length} نتيجة جديدة:',
          style: Theme.of(context).textTheme.titleMedium,
        ),
        const Divider(),
        Expanded(
          child: ListView.builder(
            itemCount: _results.length,
            itemBuilder: (context, index) {
              final result = _results[index];
              return Card(
                margin: const EdgeInsets.symmetric(vertical: 8),
                child: Padding(
                  padding: const EdgeInsets.all(12.0),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(result.title,
                          style: const TextStyle(fontWeight: FontWeight.bold)),
                      const SizedBox(height: 4),
                      Text(result.description),
                      const SizedBox(height: 8),
                      Align(
                        alignment: Alignment.centerLeft,
                        child: ElevatedButton.icon(
                          icon: Icon(result.isAdded
                              ? Icons.check
                              : Icons.add_circle_outline),
                          label: Text(result.isAdded ? 'تمت الإضافة' : 'إضافة للمشروع'),
                          onPressed: result.isAdded
                              ? null
                              : () => _addResultToBugs(result),
                          style: ElevatedButton.styleFrom(
                            backgroundColor: result.isAdded
                                ? Colors.green
                                : Theme.of(context).primaryColor,
                          ),
                        ),
                      )
                    ],
                  ),
                ),
              );
            },
          ),
        ),
      ],
    );
  }
}
import 'package:flutter/material.dart';
import '../services/supabase_service.dart';
// --- إضافة: استيراد نوافذ الحوار ---
import 'widgets/app_dialogs.dart';

class AddBugDialog extends StatefulWidget {
  final String projectId;
  final VoidCallback onBugAdded;

  const AddBugDialog({
    super.key,
    required this.projectId,
    required this.onBugAdded,
  });

  @override
  State<AddBugDialog> createState() => _AddBugDialogState();
}

class _AddBugDialogState extends State<AddBugDialog> {
  final _formKey = GlobalKey<FormState>();
  final _titleController = TextEditingController();
  final _descriptionController = TextEditingController();
  bool _isSubmitting = false;

  String _selectedType = 'بسيط';
  final _bugTypes = ['حرج', 'بسيط', 'تحسين'];

  Future<void> _submitBug() async {
    if (_formKey.currentState!.validate()) {
      setState(() => _isSubmitting = true);

      try {
        final supabaseService = SupabaseService();
        final bugData = {
          'title': _titleController.text.trim(),
          'description': _descriptionController.text.trim(),
          'type': _selectedType,
          'project_id': widget.projectId,
          'status': 'جاري',
        };
        await supabaseService.addBug(bugData);

        if (mounted) {
          Navigator.of(context).pop();
          widget.onBugAdded();
        }
      } catch (e) {
        // --- تعديل: استبدال SnackBar بنافذة حوار ---
        if (mounted) {
          showErrorDialog(context, 'فشل في إضافة الخطأ: $e');
        }
      } finally {
        if (mounted) {
          setState(() => _isSubmitting = false);
        }
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: const Text('إضافة جديد'),
      content: Form(
        key: _formKey,
        child: SingleChildScrollView(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextFormField(
                controller: _titleController,
                decoration: const InputDecoration(labelText: 'العنوان'),
                validator: (value) =>
                    value!.trim().isEmpty ? 'الرجاء إدخال عنوان' : null,
              ),
              const SizedBox(height: 16),
              TextFormField(
                controller: _descriptionController,
                decoration: const InputDecoration(labelText: 'الوصف'),
                maxLines: 4,
                validator: (value) =>
                    value!.trim().isEmpty ? 'الرجاء إدخال وصف' : null,
              ),
              const SizedBox(height: 16),
              DropdownButtonFormField<String>(
                value: _selectedType,
                decoration: const InputDecoration(labelText: 'النوع'),
                items: _bugTypes.map((String type) {
                  return DropdownMenuItem<String>(
                    value: type,
                    child: Text(type),
                  );
                }).toList(),
                onChanged: (newValue) {
                  setState(() => _selectedType = newValue!);
                },
              ),
            ],
          ),
        ),
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.of(context).pop(),
          child: const Text('إلغاء'),
        ),
        ElevatedButton(
          onPressed: _isSubmitting ? null : _submitBug,
          child: _isSubmitting
              ? const SizedBox(
                  height: 20,
                  width: 20,
                  child: CircularProgressIndicator(
                      strokeWidth: 2, color: Colors.white),
                )
              : const Text('إضافة'),
        ),
      ],
    );
  }
}import 'package:flutter/material.dart';
import '../models/hub_member.dart';
import '../models/project.dart';
import '../services/supabase_service.dart';
import 'add_edit_project_dialog.dart';
import 'app_dialogs.dart';

class ProjectSidebar extends StatefulWidget {
  final Function(Project?) onProjectSelected;
  final Project? selectedProject;
  final HubMember? myMembership;

  const ProjectSidebar({
    super.key,
    required this.onProjectSelected,
    required this.selectedProject,
    required this.myMembership,
  });

  @override
  ProjectSidebarState createState() => ProjectSidebarState();
}

class ProjectSidebarState extends State<ProjectSidebar> {
  final SupabaseService _supabaseService = SupabaseService();
  late Future<List<Project>> _projectsFuture;

  bool get _isLeader => widget.myMembership?.role == 'leader';

  @override
  void initState() {
    super.initState();
    refreshProjects();
  }

  void refreshProjects() {
    if (mounted) {
      setState(() {
        _projectsFuture = _supabaseService.getProjects();
      });
    }
  }

  void _showAddProjectDialog() {
    final canAdd = widget.myMembership?.canManageProjects ?? false;
    if (_isLeader || canAdd) {
      showDialog(
        context: context,
        // --- تعديل: منع الإغلاق بالضغط خارج النافذة ---
        barrierDismissible: false,
        builder: (context) => AddEditProjectDialog(
          onProjectSaved: (isNew) {
            refreshProjects();
          },
        ),
      );
    } else {
      showPermissionDeniedDialog(context);
    }
  }

  void _deleteProject(Project project) async {
    final canManage = widget.myMembership?.canManageProjects ?? false;
    if (!_isLeader && !canManage) {
      showPermissionDeniedDialog(context);
      return;
    }

    final confirm = await showDialog<bool>(
      context: context,
      // --- تعديل: منع الإغلاق بالضغط خارج النافذة ---
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        title: const Text('حذف المشروع'),
        content: Text(
            'هل أنت متأكد من رغبتك في حذف مشروع "${project.name}"؟ لا يمكن التراجع عن هذا الإجراء.'),
        actions: [
          TextButton(
              onPressed: () => Navigator.pop(context, false),
              child: const Text('إلغاء')),
          TextButton(
            onPressed: () => Navigator.pop(context, true),
            child: Text('حذف', style: TextStyle(color: Colors.red.shade400)),
          ),
        ],
      ),
    );

    if (confirm == true) {
      try {
        await _supabaseService.deleteProject(project.id);
        
        if (widget.selectedProject?.id == project.id) {
          widget.onProjectSelected(null);
        }
        
        refreshProjects();
      } catch (e) {
        // --- تعديل: استبدال SnackBar بنافذة حوار ---
        if (mounted) {
          showErrorDialog(context,'فشل حذف المشروع: $e');
        }
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Drawer(
      child: SafeArea(
        child: Column(
          children: [
            AppBar(
              title: const Text('المشاريع'),
              automaticallyImplyLeading: false,
              actions: [
                IconButton(
                  icon: const Icon(Icons.refresh),
                  onPressed: refreshProjects,
                  tooltip: 'تحديث القائمة',
                ),
              ],
            ),
            ListTile(
              leading: const Icon(Icons.add_circle_outline),
              title: const Text('إضافة مشروع جديد'),
              tileColor: Theme.of(context).primaryColor.withAlpha(50),
              onTap: _showAddProjectDialog,
            ),
            const Divider(height: 1),
            Expanded(
              child: FutureBuilder<List<Project>>(
                future: _projectsFuture,
                builder: (context, snapshot) {
                  if (snapshot.connectionState == ConnectionState.waiting) {
                    return const Center(child: CircularProgressIndicator());
                  }
                  if (snapshot.hasError) {
                    return Center(child: Text('خطأ: ${snapshot.error}'));
                  }
                  if (!snapshot.hasData || snapshot.data!.isEmpty) {
                    return const Center(
                      child: Padding(
                        padding: EdgeInsets.all(16.0),
                        child: Text(
                          'لا توجد مشاريع بعد. ابدأ بإضافة مشروع جديد!',
                          textAlign: TextAlign.center,
                        ),
                      ),
                    );
                  }
                  final projects = snapshot.data!;
                  return ListView.builder(
                    padding: EdgeInsets.zero,
                    itemCount: projects.length,
                    itemBuilder: (context, index) {
                      final project = projects[index];
                      return ListTile(
                        title: Text(project.name),
                        selected: widget.selectedProject?.id == project.id,
                        selectedTileColor:
                            Theme.of(context).primaryColor.withOpacity(0.3),
                        onTap: () {
                          widget.onProjectSelected(project);
                          if(Scaffold.of(context).isDrawerOpen) {
                             Navigator.of(context).pop();
                          }
                        },
                        trailing: IconButton(
                          icon: const Icon(Icons.delete_outline, size: 20),
                          onPressed: () => _deleteProject(project),
                          tooltip: 'حذف المشروع',
                        ),
                      );
                    },
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }
}import 'package:flutter/material.dart';
import '../models/bug.dart';
import '../services/supabase_service.dart';
// --- إضافة: استيراد نوافذ الحوار ---
import 'app_dialogs.dart';


class EditBugDialog extends StatefulWidget {
  final Bug bug;
  final VoidCallback onBugEdited;

  const EditBugDialog({
    super.key,
    required this.bug,
    required this.onBugEdited,
  });

  @override
  State<EditBugDialog> createState() => _EditBugDialogState();
}

class _EditBugDialogState extends State<EditBugDialog> {
  final _formKey = GlobalKey<FormState>();
  late TextEditingController _titleController;
  late TextEditingController _descriptionController;
  bool _isSubmitting = false;

  late String _selectedType;
  final _bugTypes = ['حرج', 'بسيط', 'تحسين'];

  @override
  void initState() {
    super.initState();
    _titleController = TextEditingController(text: widget.bug.title);
    _descriptionController = TextEditingController(text: widget.bug.description);
    _selectedType = widget.bug.type;
  }

  @override
  void dispose() {
    _titleController.dispose();
    _descriptionController.dispose();
    super.dispose();
  }

  Future<void> _submitChanges() async {
    if (_formKey.currentState!.validate()) {
      setState(() => _isSubmitting = true);

      try {
        final supabaseService = SupabaseService();
        final bugData = {
          'title': _titleController.text.trim(),
          'description': _descriptionController.text.trim(),
          'type': _selectedType,
        };
        await supabaseService.updateBug(widget.bug.id, bugData);

        if (mounted) {
          Navigator.of(context).pop();
          widget.onBugEdited();
        }
      } catch (e) {
        // --- تعديل: استبدال SnackBar بنافذة حوار ---
        if (mounted) {
          showErrorDialog(context, 'فشل في تعديل الخطأ: $e');
        }
      } finally {
        if (mounted) {
          setState(() => _isSubmitting = false);
        }
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: const Text('تعديل الخطأ/التحسين'),
      content: Form(
        key: _formKey,
        child: SingleChildScrollView(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextFormField(
                controller: _titleController,
                decoration: const InputDecoration(labelText: 'العنوان'),
                validator: (value) => value!.trim().isEmpty ? 'الرجاء إدخال عنوان' : null,
              ),
              const SizedBox(height: 16),
              TextFormField(
                controller: _descriptionController,
                decoration: const InputDecoration(labelText: 'الوصف'),
                maxLines: 4,
                validator: (value) => value!.trim().isEmpty ? 'الرجاء إدخال وصف' : null,
              ),
              const SizedBox(height: 16),
              DropdownButtonFormField<String>(
                value: _selectedType,
                decoration: const InputDecoration(labelText: 'النوع'),
                items: _bugTypes.map((String type) {
                  return DropdownMenuItem<String>(
                    value: type,
                    child: Text(type),
                  );
                }).toList(),
                onChanged: (newValue) {
                  setState(() => _selectedType = newValue!);
                },
              ),
            ],
          ),
        ),
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.of(context).pop(),
          child: const Text('إلغاء'),
        ),
        ElevatedButton(
          onPressed: _isSubmitting ? null : _submitChanges,
          child: _isSubmitting
              ? const SizedBox(
                  height: 20, width: 20,
                  child: CircularProgressIndicator(strokeWidth: 2, color: Colors.white),
                )
              : const Text('حفظ التعديلات'),
        ),
      ],
    );
  }
}import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_markdown/flutter_markdown.dart';
import 'package:share_plus/share_plus.dart';
// --- تعديل (3): استيراد الحزم اللازمة لحفظ الملف المؤقت ---
import 'package:path_provider/path_provider.dart';
import 'dart:io';
import 'app_dialogs.dart';


class CodeFileView extends StatelessWidget {
  final String filePath;
  final String codeContent;
  final Map<String, String> allFiles;

  const CodeFileView({
    super.key,
    required this.filePath,
    required this.codeContent,
    required this.allFiles,
  });

  // --- تعديل (3): تغيير وظيفة المشاركة لإرسال ملف بدلاً من نص ---
  Future<void> _shareAllFilesAsFile(BuildContext context) async {
    try {
      final buffer = StringBuffer();
      buffer.writeln('DevNest Code Share');
      buffer.writeln('=' * 20);

      allFiles.forEach((path, content) {
        buffer.writeln('\n// --- FILE: $path ---\n');
        buffer.writeln(content);
        buffer.writeln('\n');
      });

      // 1. الحصول على مسار المجلد المؤقت
      final tempDir = await getTemporaryDirectory();
      // 2. إنشاء ملف نصي في المجلد المؤقت
      final file = File('${tempDir.path}/devnest_code_share.txt');
      // 3. كتابة كل محتوى الكود في هذا الملف
      await file.writeAsString(buffer.toString());

      // 4. استخدام Share.shareXFiles لمشاركة الملف الفعلي
      // هذا يتجاوز قيود عدد الأحرف في معظم التطبيقات
      await Share.shareXFiles(
        [XFile(file.path)], 
        subject: 'مشاركة ملفات الكود من DevNest'
      );

    } catch (e) {
      if (context.mounted) {
        showErrorDialog(context, 'حدث خطأ أثناء تحضير ملف المشاركة: $e');
      }
    }
  }


  @override
  Widget build(BuildContext context) {
    return Container(
      margin: const EdgeInsets.symmetric(vertical: 8.0),
      decoration: BoxDecoration(
          color: Theme.of(context).scaffoldBackgroundColor,
          borderRadius: BorderRadius.circular(8),
          border: Border.all(color: Colors.grey.shade700)),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.stretch,
        children: [
          Container(
            padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 4),
            decoration: BoxDecoration(
                color: Colors.grey.withOpacity(0.2),
                borderRadius: const BorderRadius.only(
                  topLeft: Radius.circular(7),
                  topRight: Radius.circular(7),
                )),
            child: Directionality(
              textDirection: TextDirection.ltr,
              child: Row(
                children: [
                  Icon(Icons.description_outlined,
                      size: 16, color: Colors.grey.shade400),
                  const SizedBox(width: 8),
                  Expanded(
                    child: Text(
                      filePath,
                      style: TextStyle(
                          color: Colors.grey.shade400,
                          fontWeight: FontWeight.bold,
                          fontSize: 12),
                      overflow: TextOverflow.ellipsis,
                    ),
                  ),
                  IconButton(
                    icon: const Icon(Icons.copy_all_outlined, size: 18),
                    tooltip: 'نسخ الكود',
                    onPressed: () {
                      Clipboard.setData(ClipboardData(text: codeContent));
                      showSuccessDialog(context, 'تم نسخ الكود بنجاح!');
                    },
                  ),
                  IconButton(
                    icon: const Icon(Icons.share_outlined,
                        size: 18),
                    tooltip: 'مشاركة كل الملفات',
                    // --- تعديل (3): استدعاء الدالة الجديدة ---
                    onPressed: () => _shareAllFilesAsFile(context),
                  )
                ],
              ),
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: Directionality(
              textDirection: TextDirection.ltr,
              child: MarkdownBody(
                data: '```dart\n$codeContent\n```',
                selectable: true,
                styleSheet:
                    MarkdownStyleSheet.fromTheme(Theme.of(context)).copyWith(
                  code: const TextStyle(
                      fontFamily: 'monospace',
                      fontSize: 14.0,
                      backgroundColor: Colors.transparent),
                  codeblockDecoration: BoxDecoration(
                    color: Theme.of(context).scaffoldBackgroundColor,
                    borderRadius: BorderRadius.circular(4),
                  ),
                ),
              ),
            ),
          )
        ],
      ),
    );
  }
}

import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_markdown/flutter_markdown.dart';
import 'edit_bug_dialog.dart';
import '../models/bug.dart';
import '../models/hub_member.dart';
import '../models/project.dart';
import '../services/gemini_service.dart';
import '../services/github_service.dart';
import '../services/supabase_service.dart';
import './app_dialogs.dart';

class BugCard extends StatelessWidget {
  final Project project;
  final Bug bug;
  final VoidCallback onStatusChanged;
  final VoidCallback onDeleted;
  final HubMember? myMembership;

  const BugCard({
    super.key,
    required this.project,
    required this.bug,
    required this.onStatusChanged,
    required this.onDeleted,
    required this.myMembership,
  });

  Color? _getPriorityColor(int? priority) {
    if (priority == null) return null;
    switch (priority) {
      case 1:
        return Colors.red.shade400;
      case 2:
        return Colors.orange.shade400;
      case 3:
        return Colors.yellow.shade600;
      case 4:
        return Colors.blue.shade300;
      case 5:
        return Colors.grey.shade400;
      default:
        return null;
    }
  }

  Color _getStatusColor(String status) {
    switch (status) {
      case 'جاري':
        return Colors.blue.shade400;
      case 'تم الحل':
        return Colors.green.shade400;
      default:
        return Colors.grey.shade400;
    }
  }

  IconData _getTypeIcon(String type) {
    switch (type) {
      case 'حرج':
        return Icons.error;
      case 'بسيط':
        return Icons.bug_report;
      case 'تحسين':
        return Icons.auto_awesome;
      default:
        return Icons.help_outline;
    }
  }

  String _formatDateManually(DateTime date) {
    const Map<int, String> arabicMonths = {
      1: 'يناير',
      2: 'فبراير',
      3: 'مارس',
      4: 'أبريل',
      5: 'مايو',
      6: 'يونيو',
      7: 'يوليو',
      8: 'أغسطس',
      9: 'سبتمبر',
      10: 'أكتوبر',
      11: 'نوفمبر',
      12: 'ديسمبر'
    };
    return '${date.day} ${arabicMonths[date.month] ?? ''} ${date.year}';
  }

  void _showDetailsDialog(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Row(children: [
          Icon(_getTypeIcon(bug.type), color: Colors.grey.shade400),
          const SizedBox(width: 8),
          Expanded(child: Text(bug.title))
        ]),
        content: SingleChildScrollView(
          child: ListBody(
            children: <Widget>[
              const Text('الوصف الكامل:',
                  style: TextStyle(fontWeight: FontWeight.bold)),
              const SizedBox(height: 8),
              SelectableText(bug.description),
              const Divider(height: 24),
              _buildDetailRow(
                  context,
                  'الحالة:',
                  Chip(
                      label: Text(bug.status,
                          style: TextStyle(
                              color: _getStatusColor(bug.status),
                              fontWeight: FontWeight.bold)),
                      backgroundColor:
                          _getStatusColor(bug.status).withOpacity(0.2),
                      side: BorderSide.none)),
              _buildDetailRow(context, 'النوع:',
                  Chip(label: Text(bug.type), backgroundColor: Theme.of(context).cardColor, side: BorderSide.none)),
              if (bug.source != null)
                _buildDetailRow(
                    context,
                    'المصدر:',
                    Chip(
                        avatar: Icon(
                            bug.source == 'ai'
                                ? Icons.auto_awesome
                                : Icons.person,
                            size: 16),
                        label:
                            Text(bug.source == 'ai' ? 'مقترح AI' : 'يدوي'),
                        backgroundColor: Theme.of(context).cardColor,
                        side: BorderSide.none)),
              _buildDetailRow(
                  context,
                  'تاريخ الإنشاء:',
                  Text(_formatDateManually(bug.createdAt),
                      style: TextStyle(color: Colors.grey.shade400))),
            ],
          ),
        ),
        actions: <Widget>[
          TextButton(
              child: const Text('إغلاق'),
              onPressed: () => Navigator.of(context).pop())
        ],
      ),
    );
  }

  Widget _buildDetailRow(BuildContext context, String title, Widget value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4.0),
      child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            Text(title, style: TextStyle(color: Colors.grey.shade300)),
            value
          ]),
    );
  }

  void _showAiSuggestion(BuildContext context) {
    if (project.githubUrl == null || project.githubUrl!.isEmpty) {
      showErrorDialog(context,
          'لا يمكن تحليل الخطأ. لم يتم ربط هذا المشروع بمستودع GitHub.');
      return;
    }
    final githubService = GitHubService();
    final geminiService = GeminiService();
    String analysisResult = '';
    String analysisState = 'loading';
    String statusMessage = 'جاري التحضير...';

    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) {
        return StatefulBuilder(
          builder: (context, setState) {
            Future<void> startAnalysis() async {
              try {
                setState(
                    () => statusMessage = 'جاري تحميل كل ملفات المشروع...');
                final codeContext = await githubService
                    .fetchRepositoryCodeAsString(project.githubUrl!);
                final result =
                    await geminiService.analyzeBugAndSuggestSnippetsFromAllFiles(
                  bug: bug,
                  project: project,
                  codeContext: codeContext,
                  onStatusUpdate: (message) {
                    if (context.mounted) setState(() => statusMessage = message);
                  },
                );
                setState(() {
                  analysisResult = result;
                  analysisState = 'done';
                });
              } catch (e) {
                if (context.mounted) {
                  Navigator.of(context).pop();
                  if (e is AllApiKeysFailedException)
                    showServiceUnavailableDialog(context, e.message);
                  else
                    showTryAgainLaterDialog(context);
                }
              }
            }

            if (analysisState == 'loading' &&
                statusMessage == 'جاري التحضير...')
              WidgetsBinding.instance
                  .addPostFrameCallback((_) => startAnalysis());
            if (analysisState == 'done')
              return _AiSolutionDialog(rawContent: analysisResult);
            return AlertDialog(
              title: const Text('فحص بالذكاء الاصطناعي'),
              content: Column(mainAxisSize: MainAxisSize.min, children: [
                const CircularProgressIndicator(),
                const SizedBox(height: 16),
                Text(statusMessage, textAlign: TextAlign.center)
              ]),
              actions: [
                TextButton(
                    onPressed: () => Navigator.of(context).pop(),
                    child: const Text('إلغاء'))
              ],
            );
          },
        );
      },
    );
  }

  void _verifyFix(BuildContext context) {
    if (project.githubUrl == null || project.githubUrl!.isEmpty) {
      showErrorDialog(context,
          'لا يمكن التحقق من الحل. لم يتم ربط هذا المشروع بمستودع GitHub.');
      return;
    }
    final githubService = GitHubService();
    final geminiService = GeminiService();
    String statusMessage = 'جاري التحضير...';
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) {
        return StatefulBuilder(
          builder: (context, setState) {
            Future<void> startVerification() async {
              try {
                setState(
                    () => statusMessage = 'جاري تحميل كل ملفات المشروع...');
                final codeContext = await githubService
                    .fetchRepositoryCodeAsString(project.githubUrl!);
                final resultJson = await geminiService.verifyFixInCode(
                  bug: bug,
                  codeContext: codeContext,
                  onStatusUpdate: (message) {
                    if (context.mounted) setState(() => statusMessage = message);
                  },
                );
                if (!context.mounted) return;
                Navigator.of(context).pop();
                final resultData = jsonDecode(resultJson);
                final bool isResolved = resultData['resolved'] ?? false;
                final String reasoning =
                    resultData['reasoning'] ?? 'لم يتم تقديم سبب.';
                showDialog(
                  context: context,
                  builder: (context) => AlertDialog(
                    title: Row(children: [
                      Icon(
                          isResolved
                              ? Icons.check_circle_outline
                              : Icons.highlight_off,
                          color: isResolved
                              ? Colors.green.shade400
                              : Colors.red.shade400),
                      const SizedBox(width: 8),
                      Text(isResolved ? 'يبدو أنه تم الحل' : 'لم يتم الحل بعد')
                    ]),
                    content: Text(reasoning),
                    actions: [
                      TextButton(
                          onPressed: () => Navigator.of(context).pop(),
                          child: const Text('حسناً'))
                    ],
                  ),
                );
              } catch (e) {
                if (context.mounted) {
                  Navigator.of(context).pop();
                  if (e is AllApiKeysFailedException)
                    showServiceUnavailableDialog(context, e.message);
                  else
                    showErrorDialog(context, 'حدث خطأ أثناء التحقق: $e');
                }
              }
            }

            if (statusMessage == 'جاري التحضير...')
              WidgetsBinding.instance
                  .addPostFrameCallback((_) => startVerification());
            return AlertDialog(
              title: const Text('التحقق من الحل'),
              content: Column(mainAxisSize: MainAxisSize.min, children: [
                const CircularProgressIndicator(),
                const SizedBox(height: 16),
                Text(statusMessage, textAlign: TextAlign.center)
              ]),
              actions: [
                TextButton(
                    onPressed: () => Navigator.of(context).pop(),
                    child: const Text('إلغاء'))
              ],
            );
          },
        );
      },
    );
  }

  void _setPriority(BuildContext context) async {
    final newPriority = await showDialog<int>(
        context: context,
        builder: (context) => SimpleDialog(
              title: const Text('حدد أولويتك الشخصية'),
              children: [
                ...List.generate(
                    5,
                    (index) => SimpleDialogOption(
                          onPressed: () => Navigator.pop(context, index + 1),
                          child: Text('أولوية ${index + 1}'),
                        )),
                const Divider(),
                SimpleDialogOption(
                  onPressed: () => Navigator.pop(context, 0), // 0 يعني إزالة
                  child: const Text('إزالة الأولوية',
                      style: TextStyle(color: Colors.orange)),
                ),
              ],
            ));

    if (newPriority != null) {
      try {
        if (newPriority == 0) {
          await SupabaseService().clearBugPriority(bug.id);
        } else {
          await SupabaseService().setBugPriority(bug.id, newPriority);
        }
        onStatusChanged();
      } catch (e) {
        if (context.mounted) {
          showErrorDialog(context, 'فشل تحديد الأولوية: $e');
        }
      }
    }
  }

  void _changeStatus(BuildContext context) async {
    if (!(myMembership?.canEditBugs ?? false)) {
      showPermissionDeniedDialog(context);
      return;
    }
    final List<String> statuses = ['جاري', 'تم الحل'];
    statuses.remove(bug.status);
    final newStatus = await showDialog<String>(
      context: context,
      barrierDismissible: false,
      builder: (context) => SimpleDialog(
          title: const Text('اختر الحالة الجديدة'),
          children: statuses
              .map((status) => SimpleDialogOption(
                  onPressed: () => Navigator.pop(context, status),
                  child: Text(status)))
              .toList()),
    );
    if (newStatus != null) {
      try {
        await SupabaseService().updateBugStatus(bug.id, newStatus);
        onStatusChanged();
      } catch (e) {
        if (context.mounted)
          showErrorDialog(context, 'فشل تحديث الحالة: $e');
      }
    }
  }

  void _editBug(BuildContext context) {
    if (!(myMembership?.canEditBugs ?? false)) {
      showPermissionDeniedDialog(context);
      return;
    }
    showDialog(
        context: context,
        barrierDismissible: false,
        builder: (context) =>
            EditBugDialog(bug: bug, onBugEdited: onStatusChanged));
  }

  void _deleteBug(BuildContext context) async {
    if (!(myMembership?.canEditBugs ?? false)) {
      showPermissionDeniedDialog(context);
      return;
    }
    final confirm = await showDialog<bool>(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        title: const Text('حذف'),
        content: const Text('هل أنت متأكد من رغبتك في حذف هذا العنصر؟'),
        actions: [
          TextButton(
              onPressed: () => Navigator.pop(context, false),
              child: const Text('إلغاء')),
          TextButton(
              onPressed: () => Navigator.pop(context, true),
              child:
                  const Text('حذف', style: TextStyle(color: Colors.red))),
        ],
      ),
    );
    if (confirm == true) {
      try {
        await SupabaseService().deleteBug(bug.id);
        onDeleted();
      } catch (e) {
        if (context.mounted) showErrorDialog(context, 'فشل الحذف: $e');
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final statusColor = _getStatusColor(bug.status);
    final canEdit = myMembership?.canEditBugs ?? false;
    final isResolved = bug.status == 'تم الحل';
    // --- تعديل: لا يتم حساب لون الأولوية إذا تم الحل ---
    final priorityColor = isResolved ? null : _getPriorityColor(bug.userPriority);

    return Card(
      margin: const EdgeInsets.symmetric(vertical: 8.0, horizontal: 4.0),
      shape: RoundedRectangleBorder(
        side: BorderSide(
            color: priorityColor ?? statusColor.withOpacity(0.5),
            width: priorityColor != null ? 2 : 1),
        borderRadius: BorderRadius.circular(12),
      ),
      child: InkWell(
        onTap: () => _showDetailsDialog(context),
        borderRadius: BorderRadius.circular(12),
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // --- تعديل: إخفاء الأولوية إذا تم الحل ---
                  if (bug.userPriority != null && !isResolved)
                    Padding(
                      padding: const EdgeInsets.only(left: 8.0),
                      child: Tooltip(
                          message: 'أولويتك الشخصية: ${bug.userPriority}',
                          child: Icon(Icons.bookmark,
                              color: priorityColor, size: 20)),
                    ),
                  Expanded(
                      child: Text(bug.title,
                          style: const TextStyle(
                              fontWeight: FontWeight.bold, fontSize: 18))),
                  if (canEdit)
                    SizedBox(
                      height: 36,
                      width: 36,
                      child: PopupMenuButton<String>(
                        tooltip: 'خيارات',
                        onSelected: (value) {
                          if (value == 'edit') _editBug(context);
                          if (value == 'status') _changeStatus(context);
                          if (value == 'delete') _deleteBug(context);
                          if (value == 'priority') _setPriority(context);
                        },
                        itemBuilder: (context) {
                          List<PopupMenuEntry<String>> items = [];
                          // --- تعديل: لا تعرض خيار الأولوية إذا تم الحل ---
                          if (!isResolved) {
                            items.add(const PopupMenuItem(
                                value: 'priority',
                                child: Text('تحديد الأولوية')));
                            items.add(const PopupMenuDivider());
                            items.add(const PopupMenuItem(
                                value: 'edit', child: Text('تعديل')));
                            items.add(const PopupMenuItem(
                                value: 'status',
                                child: Text('تغيير الحالة')));
                            items.add(const PopupMenuDivider());
                          }
                          items.add(const PopupMenuItem(
                              value: 'delete',
                              child: Text('حذف',
                                  style: TextStyle(color: Colors.red))));
                          return items;
                        },
                      ),
                    )
                ],
              ),
              const SizedBox(height: 8),
              Text(bug.description,
                  maxLines: 4,
                  overflow: TextOverflow.ellipsis,
                  style: TextStyle(color: Colors.grey[400])),
              const Divider(height: 24),
              Row(
                children: [
                  Icon(_getTypeIcon(bug.type), size: 16, color: Colors.grey[400]),
                  const SizedBox(width: 4),
                  Text(bug.type, style: TextStyle(color: Colors.grey[400])),
                  const SizedBox(width: 8),
                  Container(
                    padding:
                        const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                    decoration: BoxDecoration(
                        color: statusColor.withOpacity(0.2),
                        borderRadius: BorderRadius.circular(8)),
                    child: Text(bug.status,
                        style: TextStyle(
                            color: statusColor,
                            fontSize: 12,
                            fontWeight: FontWeight.bold)),
                  ),
                  const Spacer(),
                  if (bug.source != null)
                    Tooltip(
                        message: bug.source == 'ai'
                            ? 'تمت إضافته بواسطة الذكاء الاصطناعي'
                            : 'تمت إضافته يدويًا',
                        child: Padding(
                            padding:
                                const EdgeInsets.symmetric(horizontal: 8.0),
                            child: Icon(
                                bug.source == 'ai'
                                    ? Icons.auto_awesome
                                    : Icons.person,
                                size: 16,
                                color: Colors.grey[400]))),
                  Text(_formatDateManually(bug.createdAt),
                      style:
                          TextStyle(fontSize: 12, color: Colors.grey[500])),
                ],
              ),
              if (!isResolved) ...[
                const SizedBox(height: 12),
                SizedBox(
                    width: double.infinity,
                    child: OutlinedButton.icon(
                        icon: const Icon(Icons.auto_fix_high_outlined,
                            size: 18),
                        label: const Text('فحص بالذكاء الاصطناعي'),
                        onPressed: () => _showAiSuggestion(context),
                        style: OutlinedButton.styleFrom(
                            side: BorderSide(
                                color: Theme.of(context)
                                    .primaryColor
                                    .withOpacity(0.5))))),
                const SizedBox(height: 8),
                SizedBox(
                    width: double.infinity,
                    child: OutlinedButton.icon(
                        icon: const Icon(Icons.task_alt_outlined, size: 18),
                        label: const Text('التحقق من الحل آلياً'),
                        onPressed: () => _verifyFix(context),
                        style: OutlinedButton.styleFrom(
                            side: BorderSide(
                                color: Colors.cyan.withOpacity(0.5))))),
              ]
            ],
          ),
        ),
      ),
    );
  }
}

class _AiSolutionDialog extends StatelessWidget {
  final String rawContent;
  const _AiSolutionDialog({required this.rawContent});

  Map<String, dynamic> _parseSolution() {
    const startDelimiter = '--- CODE CHANGES START ---';
    const endDelimiter = '--- CODE CHANGES END ---';
    final startIndex = rawContent.indexOf(startDelimiter);
    final endIndex = rawContent.indexOf(endDelimiter, startIndex);
    if (startIndex == -1 || endIndex == -1)
      return {'explanation': rawContent, 'changes': [], 'error': null};
    final explanation = rawContent.substring(0, startIndex).trim();
    final jsonString =
        rawContent.substring(startIndex + startDelimiter.length, endIndex).trim();
    try {
      final changes = jsonDecode(jsonString);
      return {'explanation': explanation, 'changes': changes, 'error': null};
    } catch (e) {
      return {
        'explanation': explanation,
        'changes': [],
        'error': jsonString
      };
    }
  }

  @override
  Widget build(BuildContext context) {
    final solution = _parseSolution();
    final String explanation = solution['explanation'];
    final List<dynamic> changes = solution['changes'];
    final String? errorJson = solution['error'];

    return AlertDialog(
      title: const Text('اقتراح الحل'),
      contentPadding: EdgeInsets.zero,
      insetPadding: const EdgeInsets.all(16),
      content: SizedBox(
        width: MediaQuery.of(context).size.width,
        height: MediaQuery.of(context).size.height * 0.75,
        child: DefaultTabController(
          length: 2,
          child: Column(
            children: [
              const TabBar(tabs: [
                Tab(icon: Icon(Icons.description_outlined), text: 'الشرح'),
                Tab(icon: Icon(Icons.code_outlined), text: 'الأكواد المقترحة')
              ]),
              Expanded(
                child: TabBarView(
                  children: [
                    SingleChildScrollView(
                        padding: const EdgeInsets.all(16.0),
                        child: MarkdownBody(
                            data: explanation.isEmpty
                                ? 'لم يتم تقديم شرح.'
                                : explanation,
                            selectable: true)),
                    errorJson != null
                        ? _buildErrorView(errorJson)
                        : (changes.isEmpty
                            ? const Center(
                                child: Text('لا توجد تعديلات كود مقترحة.'))
                            : ListView.builder(
                                padding: const EdgeInsets.all(12),
                                itemCount: changes.length,
                                itemBuilder: (context, index) {
                                  final change = changes[index];
                                  return _CodeModificationCard(
                                      filePath: change['file_path'] ?? 'N/A',
                                      description:
                                          change['description'] ?? 'N/A',
                                      codeSnippet:
                                          change['code_snippet'] ?? 'N/A');
                                },
                              )),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
      actions: [
        TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('إغلاق'))
      ],
    );
  }

  Widget _buildErrorView(String errorJson) {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text('فشل تحليل مقترحات الكود',
              style: TextStyle(
                  color: Colors.red.shade300,
                  fontWeight: FontWeight.bold,
                  fontSize: 18)),
          const SizedBox(height: 8),
          const Text(
              'لم يتمكن التطبيق من فهم تنسيق الكود الذي أرسله الذكاء الاصطناعي. هذا هو النص الخام الذي تم استلامه:'),
          const SizedBox(height: 16),
          Container(
            padding: const EdgeInsets.all(12),
            width: double.infinity,
            decoration: BoxDecoration(
                color: Colors.black.withOpacity(0.2),
                borderRadius: BorderRadius.circular(8),
                border: Border.all(color: Colors.grey.shade700)),
            child: SelectableText(
                errorJson.isEmpty ? '(تم استلام نص فارغ)' : errorJson,
                style: const TextStyle(
                    fontFamily: 'monospace', color: Colors.yellow)),
          ),
        ],
      ),
    );
  }
}

class _CodeModificationCard extends StatelessWidget {
  final String filePath, description, codeSnippet;
  const _CodeModificationCard(
      {required this.filePath,
      required this.description,
      required this.codeSnippet});

  @override
  Widget build(BuildContext context) {
    return Card(
      margin: const EdgeInsets.symmetric(vertical: 8.0),
      elevation: 1,
      shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(12),
          side: BorderSide(color: Colors.grey.withOpacity(0.2))),
      clipBehavior: Clip.antiAlias,
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.stretch,
        children: [
          Container(
            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 10),
            color: Theme.of(context).brightness == Brightness.dark
                ? Colors.grey.shade800
                : Colors.grey.shade200,
            child: Text(filePath,
                style: const TextStyle(fontWeight: FontWeight.bold),
                overflow: TextOverflow.ellipsis),
          ),
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(crossAxisAlignment: CrossAxisAlignment.start, children: [
                  Icon(Icons.info_outline,
                      color: Colors.blue.shade300, size: 20),
                  const SizedBox(width: 8),
                  Expanded(child: Text(description))
                ]),
                const Divider(height: 24),
                Container(
                  padding: const EdgeInsets.all(12),
                  decoration: BoxDecoration(
                      color: Theme.of(context).scaffoldBackgroundColor,
                      borderRadius: BorderRadius.circular(8),
                      border: Border.all(color: Colors.grey.withOpacity(0.3))),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.stretch,
                    children: [
                      Directionality(
                          textDirection: TextDirection.ltr,
                          child: SelectableText(codeSnippet,
                              style: const TextStyle(
                                  fontFamily: 'monospace', fontSize: 13))),
                      const SizedBox(height: 8),
                      Align(
                        alignment: Alignment.centerLeft,
                        child: TextButton.icon(
                          icon: const Icon(Icons.copy_all_outlined, size: 16),
                          label: const Text('نسخ الكود'),
                          onPressed: () {
                            Clipboard.setData(ClipboardData(text: codeSnippet));
                            ScaffoldMessenger.of(context).showSnackBar(
                                const SnackBar(
                                    content:
                                        Text('تم نسخ مقتطف الكود بنجاح!'),
                                    duration: Duration(seconds: 2)));
                          },
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          )
        ],
      ),
    );
  }
}
import 'package:flutter/material.dart';

// --- (لا تغيير) ---
void showSuccessDialog(BuildContext context, String content) {
  showDialog(
    context: context,
    barrierDismissible: false,
    builder: (context) => AlertDialog(
      title: const Text('نجاح'),
      content: Text(content),
      icon: Icon(Icons.check_circle_outline, color: Colors.green.shade400, size: 32),
      actions: [
        TextButton(
          onPressed: () => Navigator.of(context).pop(),
          child: const Text('موافق'),
        ),
      ],
    ),
  );
}

// --- (لا تغيير) ---
void showErrorDialog(BuildContext context, String content) {
  showDialog(
    context: context,
    barrierDismissible: false,
    builder: (context) => AlertDialog(
      title: const Text('حدث خطأ'),
      content: Text(content),
      icon: Icon(Icons.error_outline, color: Colors.red.shade400, size: 32),
      actions: [
        TextButton(
          onPressed: () => Navigator.of(context).pop(),
          child: const Text('إغلاق'),
        ),
      ],
    ),
  );
}

/// ✅ --- (جديد) نافذة مخصصة عند إدخال رابط GitHub غير صالح ---
void showInvalidGitHubRepoDialog(BuildContext context, String errorDetails) {
  showDialog(
    context: context,
    barrierDismissible: false,
    builder: (context) => AlertDialog(
      title: const Text('خطأ في مستودع GitHub'),
      content: Text(
          'تعذر الوصول إلى المستودع. الرجاء التأكد من أن الرابط صحيح وأن المستودع عام (public).\n\nالتفاصيل: $errorDetails'),
      icon: Icon(Icons.link_off, color: Colors.orange.shade400, size: 32),
      actions: [
        TextButton(
          onPressed: () => Navigator.of(context).pop(),
          child: const Text('فهمت'),
        ),
      ],
    ),
  );
}

/// ✅ --- (جديد) نافذة مخصصة عند انقطاع الاتصال بالإنترنت ---
void showNoInternetDialog(BuildContext context, VoidCallback onRetry) {
  showDialog(
    context: context,
    barrierDismissible: false,
    builder: (context) => AlertDialog(
      title: const Text('انقطاع الاتصال'),
      content: const Text(
          'تعذر الاتصال بالخادم. الرجاء التحقق من اتصالك بالإنترنت والمحاولة مرة أخرى.'),
      icon: Icon(Icons.wifi_off, color: Colors.blue.shade300, size: 32),
      actions: [
        TextButton(
          onPressed: () {
            Navigator.of(context).pop();
            onRetry();
          },
          child: const Text('إعادة المحاولة'),
        ),
      ],
    ),
  );
}

// --- (لا تغيير) ---
void showPermissionDeniedDialog(BuildContext context) {
   showDialog(
    context: context,
    barrierDismissible: false,
    builder: (context) => AlertDialog(
      title: const Text('وصول مرفوض'),
      content: const Text('ليس لديك الصلاحية الكافية للقيام بهذا الإجراء. الرجاء التواصل مع قائد الـ Hub.'),
      icon: Icon(Icons.gpp_bad_outlined, color: Colors.orange.shade400, size: 32),
      actions: [
        TextButton(
          onPressed: () => Navigator.of(context).pop(),
          child: const Text('فهمت'),
        ),
      ],
    ),
  );
}

// --- (لا تغيير) ---
void showTryAgainLaterDialog(BuildContext context) {
  showDialog(
    context: context,
    barrierDismissible: false,
    builder: (context) => AlertDialog(
      title: const Text('حدث خطأ'),
      content: const Text('فشل الاتصال بالخدمة. الرجاء المحاولة مرة أخرى لاحقًا.'),
      icon: Icon(Icons.cloud_off, color: Colors.orange.shade400, size: 32),
      actions: [
        TextButton(
          onPressed: () => Navigator.of(context).pop(),
          child: const Text('حسنًا'),
        ),
      ],
    ),
  );
}

// --- (لا تغيير) ---
void showServiceUnavailableDialog(BuildContext context, String content) {
  showDialog(
    context: context,
    barrierDismissible: false,
    builder: (context) => AlertDialog(
      title: const Text('الخدمة غير متاحة مؤقتاً'),
      content: Text(content),
      icon: Icon(Icons.cloud_off, color: Colors.orange.shade400, size: 32),
      actions: [
        TextButton(
          onPressed: () => Navigator.of(context).pop(),
          child: const Text('حسنًا'),
        ),
      ],
    ),
  );
}
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_markdown/flutter_markdown.dart';
import 'dart:async';
import '../models/project.dart';
import '../models/ai_chat_message.dart';
import '../models/hub_member.dart';
import '../services/gemini_service.dart';
import '../services/github_service.dart';
import '../services/supabase_service.dart';
import 'app_dialogs.dart';
import 'package:url_launcher/url_launcher.dart';
import 'code_file_view.dart';

class AiAssistantPanel extends StatefulWidget {
  final Project? projectContext;
  final HubMember? myMembership;

  const AiAssistantPanel({
    super.key,
    this.projectContext,
    this.myMembership,
  });

  @override
  State<AiAssistantPanel> createState() => _AiAssistantPanelState();
}

class _AiAssistantPanelState extends State<AiAssistantPanel> {
  final TextEditingController _controller = TextEditingController();
  final ScrollController _scrollController = ScrollController();
  // --- RE-ADDED: GeminiService instance for client-side calls ---
  final GeminiService _geminiService = GeminiService();
  final SupabaseService _supabaseService = SupabaseService();
  final GitHubService _githubService = GitHubService();

  bool _isAnalyzingCode = false;
  // --- RE-ADDED: Code context is needed for the Gemini call ---
  String? _codeContext; 

  Stream<List<AiChatMessage>>? _chatStream;
  List<AiChatMessage> _messages = []; 

  @override
  void initState() {
    super.initState();
    _setupChatStream();
    if (widget.projectContext?.githubUrl?.isNotEmpty ?? false) {
      _analyzeCodebase();
    }
  }

  @override
  void didUpdateWidget(covariant AiAssistantPanel oldWidget) {
    super.didUpdateWidget(oldWidget);
    if (widget.projectContext?.id != oldWidget.projectContext?.id) {
      _setupChatStream();
      _codeContext = null; 
      if (widget.projectContext?.githubUrl?.isNotEmpty ?? false) {
        _analyzeCodebase();
      }
    }
  }

  void _setupChatStream() {
    setState(() {
      if (widget.projectContext != null) {
        _chatStream =
            _supabaseService.getChatHistoryStream(widget.projectContext!.id);
      } else {
        _chatStream = null;
      }
    });
  }

  @override
  void dispose() {
    _scrollController.dispose();
    _controller.dispose();
    super.dispose();
  }

  void _scrollToBottom() {
    Timer(const Duration(milliseconds: 100), () {
      if (_scrollController.hasClients) {
        _scrollController.animateTo(
          _scrollController.position.maxScrollExtent,
          duration: const Duration(milliseconds: 300),
          curve: Curves.easeOut,
        );
      }
    });
  }

  Future<void> _analyzeCodebase() async {
    if (widget.projectContext?.githubUrl == null ||
        widget.projectContext!.githubUrl!.isEmpty) return;

    setState(() => _isAnalyzingCode = true);
    try {
      final code = await _githubService
          .fetchRepositoryCodeAsString(widget.projectContext!.githubUrl!);
      setState(() {
         _codeContext = code; 
      });
      if(mounted) showSuccessDialog(context, 'تم تحليل الكود بنجاح. يمكنك الآن طرح أسئلة حوله.');
    } catch (e) {
      if (mounted) showErrorDialog(context, 'فشل تحليل الكود: $e');
    } finally {
      if (mounted) {
        setState(() => _isAnalyzingCode = false);
      }
    }
  }

  // --- REWRITTEN: New `sendMessage` logic ---
  Future<void> _sendMessage() async {
    final canChat = widget.myMembership?.canUseChat ?? false;
    if (!canChat) {
      showPermissionDeniedDialog(context);
      return;
    }

    if (_controller.text.trim().isEmpty || widget.projectContext == null) return;

    final userMessage = _controller.text.trim();
    final projectId = widget.projectContext!.id;
    _controller.clear();
    FocusScope.of(context).unfocus();

    try {
      // Step 1: Add user message to DB immediately
      await _supabaseService.addChatMessage(
          projectId: projectId, role: 'user', content: userMessage);
      
      _scrollToBottom();

      // Step 2: Trigger the AI response generation but DON'T await it.
      // This lets the UI continue without waiting for the network call to finish.
      _triggerGeminiResponse(projectId, userMessage);

    } catch(e) {
      if (mounted) {
        showErrorDialog(context, "فشل إرسال الرسالة: $e");
      }
    }
  }

  /// This function runs in the background to get and save the AI's response.
  Future<void> _triggerGeminiResponse(String projectId, String userMessage) async {
     try {
      final bugs = await _supabaseService.getBugsForProject(projectId);
      final history = await _supabaseService.getRecentChatHistory(projectId);

      final response = await _geminiService.generalChat(
        userMessage: userMessage,
        project: widget.projectContext,
        bugs: bugs,
        history: history,
        codeContext: _codeContext,
      );

      // Important: Check if the widget is still alive before saving the response
      if (!mounted) return;

      await _supabaseService.addChatMessage(
          projectId: projectId, role: 'model', content: response);

    } catch(e) {
      if (!mounted) return; // Don't show dialog if widget is disposed
      
      showTryAgainLaterDialog(context);
      await _supabaseService.addChatMessage(
          projectId: projectId, role: 'model', content: 'عذراً، حدث خطأ ولم أتمكن من إكمال الطلب.');
    }
  }


  Future<void> _clearChatHistory() async {
    if (widget.projectContext == null) return;

    final confirm = await showDialog<bool>(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        title: const Text('مسح المحادثة'),
        content:
            const Text('هل أنت متأكد من رغبتك في مسح جميع رسائل هذه المحادثة؟'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context, false),
            child: const Text('إلغاء'),
          ),
          TextButton(
            onPressed: () => Navigator.pop(context, true),
            child: const Text('مسح', style: TextStyle(color: Colors.red)),
          ),
        ],
      ),
    );

    if (confirm == true) {
      try {
        await _supabaseService.clearChatHistory(widget.projectContext!.id);
        if (mounted) {
          showSuccessDialog(context, 'تم مسح المحادثة بنجاح.');
        }
      } catch (e) {
        if (mounted) {
          showErrorDialog(context, 'فشل مسح المحادثة: $e');
        }
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final bool hasProject = widget.projectContext != null;
    final bool canChat = widget.myMembership?.canUseChat ?? false;
    final bool isLeader = widget.myMembership?.role == 'leader';
    final bool hasGithubLink =
        widget.projectContext?.githubUrl?.isNotEmpty ?? false;

    return Drawer(
      child: SafeArea(
        child: Column(
          children: [
            Padding(
              padding:
                  const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  if (isLeader && hasProject)
                    IconButton(
                      icon: const Icon(Icons.delete_sweep_outlined),
                      onPressed: _clearChatHistory,
                      tooltip: 'مسح سجل المحادثة',
                    )
                  else
                    const SizedBox(width: 48),
                  Column(
                    children: [
                      Text('المساعد الذكي',
                          style: Theme.of(context).textTheme.headlineSmall),
                      if (hasProject)
                        Text('مشروع: ${widget.projectContext!.name}',
                            style: Theme.of(context).textTheme.bodySmall),
                    ],
                  ),
                  if (hasGithubLink)
                    IconButton(
                      icon: const Icon(Icons.refresh),
                      onPressed: _isAnalyzingCode ? null : _analyzeCodebase,
                      tooltip: 'إعادة قراءة وتحليل الكود من GitHub',
                    )
                  else
                    const SizedBox(width: 48),
                ],
              ),
            ),
            const Divider(height: 1),
            if (_isAnalyzingCode)
              const Padding(
                  padding: EdgeInsets.symmetric(vertical: 8.0),
                  child: Column(
                    children: [
                      LinearProgressIndicator(),
                      SizedBox(height: 4),
                      Text('جاري قراءة وتحليل الكود...')
                    ],
                  )),
            Expanded(
              child: !hasProject
                  ? const Center(
                      child: Text('الرجاء اختيار مشروع لبدء المحادثة.'))
                  : StreamBuilder<List<AiChatMessage>>(
                      stream: _chatStream,
                      builder: (context, snapshot) {
                        if (snapshot.connectionState ==
                                ConnectionState.waiting &&
                            !snapshot.hasData) {
                          return const Center(
                              child: CircularProgressIndicator());
                        }
                        if (snapshot.hasError) {
                          return Center(
                              child: Text('خطأ: ${snapshot.error}'));
                        }

                        _messages = snapshot.data ?? [];

                        if (_messages.isEmpty) {
                          return const Center(
                              child: Text('مرحباً! كيف يمكنني مساعدتك؟'));
                        }

                        WidgetsBinding.instance
                            .addPostFrameCallback((_) => _scrollToBottom());
                        
                        final bool showTypingIndicator = _messages.isNotEmpty && _messages.last.role == 'user';

                        final itemCount =
                            _messages.length + (showTypingIndicator ? 1 : 0);

                        return ListView.builder(
                          controller: _scrollController,
                          itemCount: itemCount,
                          padding: const EdgeInsets.symmetric(vertical: 8.0),
                          itemBuilder: (context, index) {
                            if (index == _messages.length && showTypingIndicator) {
                              return _buildTypingIndicator();
                            }
                            final message = _messages[index];
                            return _buildMessageBubble(message);
                          },
                        );
                      },
                    ),
            ),
            Padding(
              padding: EdgeInsets.only(
                  bottom: MediaQuery.of(context).viewInsets.bottom,
                  left: 16,
                  right: 16,
                  top: 8),
              child: TextField(
                controller: _controller,
                enabled: hasProject && canChat && !_isAnalyzingCode,
                decoration: InputDecoration(
                  hintText: !hasProject
                      ? 'اختر مشروعاً أولاً'
                      : (_isAnalyzingCode
                          ? 'جاري تحليل الكود...'
                          : (canChat
                              ? 'اسأل عن مشروعك...'
                              : 'ليس لديك صلاحية للمحادثة')),
                  suffixIcon: IconButton(
                    icon: const Icon(Icons.send),
                    onPressed: (
                           !hasProject ||
                            !canChat ||
                            _isAnalyzingCode)
                        ? null
                        : _sendMessage,
                  ),
                ),
                onSubmitted: (_) => _sendMessage(),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildTypingIndicator() {
    return Align(
      alignment: AlignmentDirectional.centerStart,
      child: Container(
        padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 14),
        margin: const EdgeInsets.symmetric(vertical: 4, horizontal: 8),
        decoration: BoxDecoration(
          color: Theme.of(context).cardColor,
          borderRadius: BorderRadius.circular(12),
        ),
        child: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            SizedBox(
              width: 18,
              height: 18,
              child: CircularProgressIndicator(
                  strokeWidth: 2, color: Colors.grey.shade400),
            ),
            const SizedBox(width: 10),
            const Text("...يفكر"),
          ],
        ),
      ),
    );
  }

  Widget _buildMessageBubble(AiChatMessage message) {
    final isUser = message.role == 'user';
    final content = message.content;
    
    // This logic to handle code blocks can be removed if you are certain the AI won't send them.
    // However, it's safer to leave it to gracefully handle any accidental code snippets.
    final fileRegex = RegExp(
      r'--- START FILE: (.*?) ---\s*(.*?)\s*--- END FILE ---',
      dotAll: true, caseSensitive: false);

    final matches = fileRegex.allMatches(content);
    if (matches.isNotEmpty) {
      // If the AI accidentally sends code, show a placeholder message.
      return _buildMessageBubble(
        AiChatMessage(
          id: message.id, 
          userId: message.userId,
          projectId: message.projectId, 
          role: message.role, 
          content: '[تم استلام محتوى برمجي، ولكن تم حجبه بناءً على طلبك.]', 
          createdAt: message.createdAt
        )
      );
    }

    return Align(
      alignment: isUser
          ? AlignmentDirectional.centerEnd
          : AlignmentDirectional.centerStart,
      child: Container(
        constraints:
            BoxConstraints(maxWidth: MediaQuery.of(context).size.width * 0.85),
        padding: const EdgeInsets.symmetric(vertical: 8, horizontal: 12),
        margin: const EdgeInsets.symmetric(vertical: 4, horizontal: 8),
        decoration: BoxDecoration(
          color: isUser
              ? Theme.of(context).primaryColor
              : Theme.of(context).cardColor,
          borderRadius: BorderRadius.circular(12),
          border: isUser
              ? null
              : Border.all(color: Colors.grey.shade700, width: 0.5),
        ),
        child: MarkdownBody(
            data: content,
            selectable: true,
            onTapLink: (text, href, title) async {
              if (href != null) {
                final uri = Uri.parse(href);
                if (await canLaunchUrl(uri)) {
                  await launchUrl(uri);
                }
              }
            },
          )
      ),
    );
  }
}

import 'package:flutter/material.dart';
import '../models/project.dart';
import '../services/github_service.dart'; // --- إضافة: استيراد خدمة GitHub ---
import '../services/supabase_service.dart';
import 'app_dialogs.dart';

class AddEditProjectDialog extends StatefulWidget {
  final Project? project;
  final Function(bool isNew) onProjectSaved;

  const AddEditProjectDialog({
    super.key,
    this.project,
    required this.onProjectSaved,
  });

  @override
  State<AddEditProjectDialog> createState() => _AddEditProjectDialogState();
}

class _AddEditProjectDialogState extends State<AddEditProjectDialog>
    with SingleTickerProviderStateMixin {
  final _formKey = GlobalKey<FormState>();
  final _nameController = TextEditingController();
  final _descriptionController = TextEditingController();
  final _githubUrlController = TextEditingController();

  // --- إضافة: متغيرات للحالة والخدمات ---
  final GitHubService _githubService = GitHubService();
  bool _isCheckingUrl = false;
  // --- نهاية الإضافة ---

  final SupabaseService _supabaseService = SupabaseService();
  bool _isLoading = false;

  bool get _isEditing => widget.project != null;

  @override
  void initState() {
    super.initState();
    if (_isEditing) {
      _nameController.text = widget.project!.name;
      _descriptionController.text = widget.project!.description ?? '';
      _githubUrlController.text = widget.project!.githubUrl ?? '';
    }
  }

  @override
  void dispose() {
    _nameController.dispose();
    _descriptionController.dispose();
    _githubUrlController.dispose();
    super.dispose();
  }

  Future<void> _saveProject() async {
    if (!(_formKey.currentState?.validate() ?? false)) return;

    final githubUrl = _githubUrlController.text.trim();

    // --- إضافة: التحقق من رابط GitHub قبل الحفظ ---
    if (githubUrl.isNotEmpty) {
      setState(() => _isCheckingUrl = true);
      final isValid = await _githubService.isValidRepository(githubUrl);
      setState(() => _isCheckingUrl = false);

      if (!isValid && mounted) {
        showInvalidGitHubRepoDialog(context, 'الرابط غير صالح أو المستودع خاص.');
        return;
      }
    }
    // --- نهاية التحقق ---

    setState(() => _isLoading = true);
    try {
      final projectData = {
        'name': _nameController.text.trim(),
        'description': _descriptionController.text.trim(),
        'github_url': githubUrl.isEmpty ? null : githubUrl,
      };

      if (_isEditing) {
        await _supabaseService.updateProject({'id': widget.project!.id, ...projectData});
      } else {
        await _supabaseService.addProject(projectData);
      }

      widget.onProjectSaved(!_isEditing);
      if (mounted) Navigator.of(context).pop();
    } catch (e) {
      if (mounted) showErrorDialog(context, 'فشل العملية: ${e.toString().replaceFirst("Exception: ", "")}');
    } finally {
      if (mounted) setState(() => _isLoading = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    // تم تبسيط الواجهة وإزالة التابات لتجربة أفضل
    return AlertDialog(
      title: Text(_isEditing ? 'تعديل المشروع' : 'إضافة مشروع جديد'),
      content: Form(
        key: _formKey,
        child: SingleChildScrollView(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              TextFormField(
                controller: _nameController,
                autofocus: true,
                decoration: const InputDecoration(labelText: 'اسم المشروع'),
                validator: (v) => (v?.trim().isEmpty ?? true) ? 'الرجاء إدخال اسم للمشروع' : null,
              ),
              const SizedBox(height: 16),
              TextFormField(
                controller: _descriptionController,
                decoration: const InputDecoration(labelText: 'وصف المشروع (اختياري)'),
                maxLines: 3,
              ),
              const SizedBox(height: 16),
              TextFormField(
                controller: _githubUrlController,
                decoration: InputDecoration(
                  labelText: 'رابط مستودع GitHub (اختياري)',
                  hintText: 'https://github.com/user/repo',
                  prefixIcon: const Icon(Icons.link),
                  // --- إضافة: عرض مؤشر التحميل عند فحص الرابط ---
                  suffixIcon: _isCheckingUrl
                      ? const Padding(padding: EdgeInsets.all(12.0), child: SizedBox(width: 16, height: 16, child: CircularProgressIndicator(strokeWidth: 2)))
                      : null,
                ),
                keyboardType: TextInputType.url,
                validator: (value) {
                  if (value != null && value.trim().isNotEmpty) {
                    final uri = Uri.tryParse(value.trim());
                    if (uri == null || !uri.isAbsolute || uri.host != 'github.com') {
                      return 'الرجاء إدخال رابط GitHub صالح';
                    }
                  }
                  return null;
                },
              ),
            ],
          ),
        ),
      ),
      actions: [
        TextButton(
            onPressed: _isLoading || _isCheckingUrl ? null : () => Navigator.of(context).pop(),
            child: const Text('إلغاء')),
        FilledButton(
          onPressed: _isLoading || _isCheckingUrl ? null : _saveProject,
          child: _isLoading || _isCheckingUrl
              ? const SizedBox(width: 20, height: 20, child: CircularProgressIndicator(strokeWidth: 2))
              : const Text('حفظ'),
        ),
      ],
    );
  }
}
import 'dart:async';
import 'package:flutter/foundation.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'dart:math';
import '../models/project.dart';
import '../models/bug.dart';
import '../models/ai_chat_message.dart';
import '../models/hub.dart';
import '../models/hub_member.dart';

class SupabaseService {
  final SupabaseClient _client = Supabase.instance.client;

  GoTrueClient get auth => _client.auth;
  String? get currentUserId => auth.currentUser?.id;

  bool isUserAnonymous() {
    return auth.currentUser?.isAnonymous ?? true;
  }

  Future<void> linkAnonymousUser({required String email, required String password}) async {
    if (!isUserAnonymous()) throw Exception("User is not anonymous.");
    await auth.updateUser(
      UserAttributes(
        email: email,
        password: password,
      ),
    );
  }

  // --- إضافة: دالة تسجيل الخروج ---
  Future<void> signOut() async {
    await auth.signOut();
    // بعد تسجيل الخروج، قم بتسجيل دخول مجهول جديد لبدء جلسة نظيفة
    await auth.signInAnonymously();
  }
  
  void _callNotifyFunction(
    String functionName, Map<String, dynamic> params) {
    try {
      debugPrint('📤 Firing notification: $functionName with params: $params');
      _client.functions.invoke(
        'notify',
        body: {
          'function_name': functionName,
          'params': params,
        },
      ).then((response) {
        debugPrint('✅ Notify function completed: ${response.data}');
      }).catchError((e, st) {
        debugPrint('❌ Background notification failed for $functionName: $e');
        debugPrintStack(stackTrace: st);
      });
    } catch (e) {
      debugPrint('❌ Failed to invoke notification function for $functionName: $e');
    }
  }

  String _generateSecretCode() {
    final random = Random();
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    return String.fromCharCodes(Iterable.generate(
        8, (_) => chars.codeUnitAt(random.nextInt(chars.length))));
  }

  Future<String> createHub(String name, String displayName) async {
    if (currentUserId == null) throw Exception('User not logged in');
    final secretCode = _generateSecretCode();
    try {
      await _client.from('hub_members').delete().eq('user_id', currentUserId!);
      await _client.rpc('create_hub_and_add_leader', params: {
        'hub_name': name,
        'secret_code': secretCode,
        'leader_display_name': displayName,
      });
      await _client
          .from('hub_members')
          .update({
            'can_add_bugs': true,
            'can_edit_bugs': true,
            'can_use_chat': true,
            'can_manage_projects': true,
            'can_use_ai_audit': true,
            'can_send_broadcasts': true,
          })
          .eq('user_id', currentUserId!)
          .eq('role', 'leader');
      return secretCode;
    } catch (e) {
      debugPrint('Error creating hub: $e');
      throw Exception('Failed to create hub. A server error occurred.');
    }
  }

  Future<void> joinHub(String secretCode, String displayName) async {
    if (currentUserId == null) throw Exception('User not logged in');
    final normalizedCode = secretCode.trim();
    final hubRes = await _client.from('hubs').select('id').ilike('secret_code', normalizedCode).maybeSingle();
    if (hubRes == null) throw Exception('Hub not found with this secret code.');
    final hubId = hubRes['id'];
    if (hubId == null) throw Exception('Unexpected error: Hub ID not found.');
    final memberRes = await _client.from('hub_members').select('id').eq('hub_id', hubId).eq('user_id', currentUserId!).maybeSingle();
    if (memberRes != null) throw Exception('You are already a member of this hub.');
    await _client.from('hub_members').delete().eq('user_id', currentUserId!);
    await _client.from('hub_members').insert({
      'hub_id': hubId,
      'user_id': currentUserId,
      'role': 'member',
      'display_name': displayName.trim(),
      'can_add_bugs': true,
      'can_edit_bugs': false,
      'can_use_chat': true,
      'can_manage_projects': false,
      'can_use_ai_audit': false,
      'can_send_broadcasts': false,
    });
  }

  Future<Hub?> getHubForUser() async {
    if (currentUserId == null) return null;
    try {
      final memberResponse = await _client.from('hub_members').select('hub_id').eq('user_id', currentUserId!).maybeSingle();
      if (memberResponse == null || memberResponse['hub_id'] == null) return null;
      final hubId = memberResponse['hub_id'];
      final hubResponse = await _client.from('hubs').select().eq('id', hubId).single();
      return Hub.fromJson(hubResponse);
    } catch (e) {
      debugPrint('Error getting user hub info manually: $e');
      return null;
    }
  }

  Future<HubMember?> getMemberInfo(String hubId) async {
    if (currentUserId == null) return null;
    final response = await _client.from('hub_members').select().eq('hub_id', hubId).eq('user_id', currentUserId!).maybeSingle();
    return response != null ? HubMember.fromJson(response) : null;
  }

  Future<List<HubMember>> getHubMembers(String hubId) async {
    final response = await _client.from('hub_members').select().eq('hub_id', hubId);
    return response.map((json) => HubMember.fromJson(json)).toList();
  }

  Stream<List<Map<String, dynamic>>> getHubMembersStream(String hubId) {
    return _client.from('hub_members').stream(primaryKey: ['id']).eq('hub_id', hubId);
  }

  Stream<Hub?> getHubStream(String hubId) {
    return _client.from('hubs').stream(primaryKey: ['id']).eq('id', hubId).map((listOfHubMaps) {
      if (listOfHubMaps.isEmpty) return null;
      return Hub.fromJson(listOfHubMaps.first);
    });
  }

  Future<void> updateMemberPermissions({
    required int memberId,
    required bool canAddBugs,
    required bool canEditBugs,
    required bool canUseChat,
    required bool canManageProjects,
    required bool canUseAiAudit,
    required bool canSendBroadcasts,
  }) async {
    await _client.from('hub_members').update({
          'can_add_bugs': canAddBugs,
          'can_edit_bugs': canEditBugs,
          'can_use_chat': canUseChat,
          'can_manage_projects': canManageProjects,
          'can_use_ai_audit': canUseAiAudit,
          'can_send_broadcasts': canSendBroadcasts,
        }).eq('id', memberId);
    // --- إضافة: إرسال إشعار عند تحديث الصلاحيات ---
    _callNotifyFunction('notify_permissions_update', {'member_id': memberId});
  }

  Future<void> updateMemberDisplayName({required int memberId, required String newName}) async {
    await _client.from('hub_members').update({'display_name': newName}).eq('id', memberId);
  }

  Future<void> removeMember(int memberId) async {
    final memberData = await _client.from('hub_members').select('hub_id').eq('id', memberId).maybeSingle();
    if (memberData == null) throw Exception('Member not found.');
    _callNotifyFunction('notify_member_removed', {'member_id': memberId});
    final hubId = memberData['hub_id'];
    await _client.from('hub_members').delete().eq('id', memberId);
    final newSecretCode = _generateSecretCode();
    await _client.from('hubs').update({'secret_code': newSecretCode}).eq('id', hubId);
  }
  
  Future<void> leaveHub(int memberId) async {
    final memberData = await _client.from('hub_members').select('hub_id, display_name').eq('id', memberId).single();
    final hubId = memberData['hub_id'];
    final senderName = memberData['display_name'];
    _callNotifyFunction('notify_member_left', {'hub_id': hubId, 'sender_name': senderName});
    await _client.from('hub_members').delete().eq('id', memberId);
  }

  Future<void> deleteHub(String hubId) async {
    await _client.rpc('delete_hub', params: {'hub_id_to_delete': hubId});
  }
  
  Future<List<Project>> getProjects() async {
    final hub = await getHubForUser();
    if (hub == null) return [];
    final response = await _client.from('projects').select().eq('hub_id', hub.id).order('created_at', ascending: false);
    return response.map<Project>((json) => Project.fromJson(json)).toList();
  }

  Future<Project> addProject(Map<String, dynamic> projectData) async {
    final hub = await getHubForUser();
    if (hub == null) throw Exception('User must be in a Hub to create projects.');
    projectData['hub_id'] = hub.id;
    final response = await _client.from('projects').insert(projectData).select().single();
    _callNotifyFunction('notify_new_project', {'project_id': response['id']});
    return Project.fromJson(response);
  }

  Future<void> deleteProject(String projectId) async {
    final projectData = await _client.from('projects').select('name').eq('id', projectId).maybeSingle();
    final projectName = projectData?['name'] ?? 'غير مسمى';
    await _client.from('projects').delete().eq('id', projectId);
    _callNotifyFunction('notify_project_deleted', {'project_name': projectName});
  }

  Future<Project> updateProject(Map<String, dynamic> projectData) async {
    final projectId = projectData['id'];
    projectData.remove('id');
    final response = await _client.from('projects').update(projectData).eq('id', projectId).select().single();
    // --- إضافة: إرسال إشعار عند تحديث المشروع ---
    _callNotifyFunction('notify_project_update', {'project_id': projectId});
    return Project.fromJson(response);
  }

  Future<List<Bug>> getBugsForProject(String projectId) async {
    if (currentUserId == null) return [];
    final bugsResponse = await _client.from('bugs').select().eq('project_id', projectId).order('created_at', ascending: false);
    final prioritiesResponse = await _client.from('user_bug_priorities').select('bug_id, priority').eq('user_id', currentUserId!);
    final prioritiesMap = { for (var item in prioritiesResponse) item['bug_id']: item['priority'] };
    return bugsResponse.map<Bug>((json) {
      final bug = Bug.fromJson(json);
      bug.userPriority = prioritiesMap[bug.id];
      return bug;
    }).toList();
  }

  Future<void> setBugPriority(String bugId, int priority) async {
    if (currentUserId == null) return;
    await _client.from('user_bug_priorities').upsert({
      'user_id': currentUserId!,
      'bug_id': bugId,
      'priority': priority,
    }, onConflict: 'user_id, bug_id');
  }

  Future<void> clearBugPriority(String bugId) async {
     if (currentUserId == null) return;
     await _client.from('user_bug_priorities').delete().eq('user_id', currentUserId!).eq('bug_id', bugId);
  }

  Future<void> addBug(Map<String, dynamic> bugData) async {
    bugData['user_id'] = currentUserId;
    if (bugData['source'] == null) bugData['source'] = 'manual';
    final response = await _client.from('bugs').insert(bugData).select().single();
    _callNotifyFunction('notify_new_bug', {'bug_id': response['id']});
  }

  Future<void> updateBug(String bugId, Map<String, dynamic> bugData) async {
    await _client.from('bugs').update(bugData).eq('id', bugId);
    _callNotifyFunction('notify_bug_update', {'bug_id': bugId});
  }

  Future<void> updateBugStatus(String bugId, String status) async {
    await _client.from('bugs').update({'status': status}).eq('id', bugId);
    _callNotifyFunction('notify_bug_update', {'bug_id': bugId});
  }
  
  Future<void> deleteBug(String bugId) async {
    final bugData = await _client.from('bugs').select('title, projects(name)').eq('id', bugId).maybeSingle();
    final bugTitle = bugData?['title'] ?? 'غير مسمى';
    final projectName = bugData?['projects']?['name'] ?? 'مشروع غير معروف';
    await _client.from('bugs').delete().eq('id', bugId);
    _callNotifyFunction('notify_bug_deleted', {'bug_title': bugTitle, 'project_name': projectName});
  }

   Future<void> addChatMessage({required String projectId, required String role, required String content}) async {
    if (currentUserId == null) throw Exception('User not signed in');
    await _client.from('ai_chat_messages').insert({'project_id': projectId, 'user_id': currentUserId, 'role': role, 'content': content});
    if (role == 'user') {
      _callNotifyFunction('notify_new_chat_message', {'project_id': projectId, 'message': content});
    }
  }

  Stream<List<AiChatMessage>> getChatHistoryStream(String projectId) {
    return _client.from('ai_chat_messages').stream(primaryKey: ['id']).eq('project_id', projectId).order('created_at', ascending: true).map((maps) => maps.map((map) => AiChatMessage.fromJson(map)).toList());
  }

  Future<List<AiChatMessage>> getRecentChatHistory(String projectId, {int limit = 15}) async {
    final response = await _client.from('ai_chat_messages').select().eq('project_id', projectId).order('created_at', ascending: false).limit(limit);
    return response.map((map) => AiChatMessage.fromJson(map)).toList().reversed.toList();
  }

  Future<void> clearChatHistory(String projectId) async {
    await _client.from('ai_chat_messages').delete().eq('project_id', projectId);
  }

  Future<void> saveDeviceToken(String token) async {
    if (currentUserId == null) return;
    await _client.from('user_devices').upsert({'user_id': currentUserId, 'device_token': token}, onConflict: 'user_id, device_token');
  }

  // --- تعديل: إضافة استدعاء لدالة إشعار مختلفة للعضو المصرح له ---
  Future<void> sendBroadcastNotification(String message, {String? title, bool fromLeader = true}) async {
    final functionName = fromLeader ? 'notify_broadcast' : 'notify_broadcast_from_member';
    _callNotifyFunction(functionName, {'title': title, 'message': message});
  }

  // --- إضافة: دوال لإدارة تفضيلات الإشعارات ---
  Future<void> saveNotificationPreferences(Map<String, bool> preferences) async {
    if (currentUserId == null) return;
    final List<Map<String, dynamic>> records = [];
    preferences.forEach((key, value) {
      String type;
      String? projectId;

      if (key.startsWith('project_')) {
        type = 'project_specific';
        projectId = key.replaceFirst('project_', '');
      } else {
        type = key;
      }
      
      records.add({
        'user_id': currentUserId!,
        'notification_type': type,
        'project_id': projectId,
        'is_enabled': value,
      });
    });

    await _client.from('notification_preferences').upsert(records, onConflict: 'user_id, notification_type, project_id');
  }

  Future<Map<String, bool>> getNotificationPreferences() async {
    if (currentUserId == null) return {};
    final response = await _client.from('notification_preferences').select().eq('user_id', currentUserId!);
    
    final Map<String, bool> prefs = {};
    for (var record in response) {
      final type = record['notification_type'];
      final projectId = record['project_id'];
      final isEnabled = record['is_enabled'];
      
      if (type == 'project_specific' && projectId != null) {
        prefs['project_$projectId'] = isEnabled;
      } else {
        prefs[type] = isEnabled;
      }
    }
    return prefs;
  }
}
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'supabase_service.dart';
import '../screens/home_screen.dart'; // للوصول إلى مفتاح HomeScreen
import 'dart:convert';

class NotificationService {
  final FirebaseMessaging _firebaseMessaging = FirebaseMessaging.instance;
  final SupabaseService _supabaseService = SupabaseService();

  static final NotificationService _instance = NotificationService._internal();
  factory NotificationService() => _instance;
  NotificationService._internal();
  
  final FlutterLocalNotificationsPlugin _localNotificationsPlugin = FlutterLocalNotificationsPlugin();
  
  // --- إضافة: متغير لتخزين مفتاح الملاح ---
  GlobalKey<NavigatorState>? _navigatorKey;

  Future<void> init(GlobalKey<NavigatorState> navigatorKey) async {
    _navigatorKey = navigatorKey; // تخزين المفتاح عند التهيئة
    await _requestPermissions();
    await _getTokenAndSave();
    _firebaseMessaging.onTokenRefresh.listen((token) {
      _supabaseService.saveDeviceToken(token);
    });
    await _setupForegroundNotifications();
    _setupInteractionListeners();
  }

  Future<void> _requestPermissions() async {
    NotificationSettings settings = await _firebaseMessaging.requestPermission(
      alert: true, announcement: false, badge: true, carPlay: false,
      criticalAlert: false, provisional: false, sound: true,
    );
    if (settings.authorizationStatus == AuthorizationStatus.authorized) {
      debugPrint('User granted notification permission');
    } else {
      debugPrint('User declined or has not accepted notification permission');
    }
  }

  Future<void> _getTokenAndSave() async {
    try {
      final token = await _firebaseMessaging.getToken();
      if (token != null) {
        debugPrint("FCM Token: $token");
        await _supabaseService.saveDeviceToken(token);
      }
    } catch (e) {
      debugPrint("Failed to get FCM token: $e");
    }
  }

  Future<void> _setupForegroundNotifications() async {
    const AndroidNotificationChannel channel = AndroidNotificationChannel(
      'high_importance_channel', 'High Importance Notifications',
      description: 'This channel is used for important notifications.', importance: Importance.max,
    );

    await _localNotificationsPlugin.resolvePlatformSpecificImplementation<AndroidFlutterLocalNotificationsPlugin>()?.createNotificationChannel(channel);

    await _localNotificationsPlugin.initialize(
      const InitializationSettings(
        android: AndroidInitializationSettings('@mipmap/ic_launcher'),
        iOS: DarwinInitializationSettings(),
      ),
      // --- تعديل: معالجة الضغط على الإشعار المحلي (عندما يكون التطبيق في المقدمة) ---
      onDidReceiveNotificationResponse: (details) {
        if (details.payload != null && details.payload!.isNotEmpty) {
          _handleNavigation(RemoteMessage.fromMap(json.decode(details.payload!)));
        }
      },
    );

    FirebaseMessaging.onMessage.listen((RemoteMessage message) {
      RemoteNotification? notification = message.notification;
      AndroidNotification? android = message.notification?.android;
      if (notification != null && !kIsWeb && android != null) {
        _localNotificationsPlugin.show(
          notification.hashCode,
          notification.title,
          notification.body,
          NotificationDetails(
            android: AndroidNotificationDetails(channel.id, channel.name, channelDescription: channel.description, icon: android.smallIcon),
          ),
          // --- إضافة: تمرير بيانات الرسالة كاملة كـ payload ---
          payload: json.encode(message.toMap()),
        );
      }
    });
  }

  void _setupInteractionListeners() {
    FirebaseMessaging.instance.getInitialMessage().then((RemoteMessage? message) {
      if (message != null) _handleNavigation(message);
    });
    FirebaseMessaging.onMessageOpenedApp.listen(_handleNavigation);
  }

  // ✅ --- (تعديل): دالة معالجة التوجيه أصبحت أكثر ذكاءً ---
  // الآن تقوم بتمرير نوع الإشعار ومعرّف المشروع إلى الواجهة الرئيسية لاتخاذ الإجراء المناسب.
  void _handleNavigation(RemoteMessage message) {
    debugPrint("Notification tapped with data: ${message.data}");
    final data = message.data;
    final String? type = data['type'];
    final String? projectId = data['project_id'];

    if (_navigatorKey?.currentState != null && projectId != null) {
      // استخدام المفتاح العام للوصول إلى حالة HomeScreen وتوجيهها
      final homeScreenState = homeScreenKey.currentState;
      if (homeScreenState != null) {
        homeScreenState.handleNotificationNavigation(type, projectId);
      }
    }
  }
}
import 'dart:async';
import 'dart:convert';
import 'dart:io';
import 'package:http/http.dart' as http;
import 'package:archive/archive.dart';
import 'package:flutter/foundation.dart';
import 'dart:math';

Future<T> _retry<T>(Future<T> Function() operation) async {
  const maxRetries = 3;
  int attempt = 0;
  while (attempt < maxRetries) {
    try {
      return await operation();
    } on SocketException catch (e) {
      attempt++;
      debugPrint('Network error (attempt $attempt): $e');
      if (attempt >= maxRetries) rethrow;
      await Future.delayed(Duration(seconds: pow(2, attempt).toInt()));
    } on TimeoutException catch (e) {
      attempt++;
      debugPrint('Request timeout (attempt $attempt): $e');
      if (attempt >= maxRetries) rethrow;
      await Future.delayed(Duration(seconds: pow(2, attempt).toInt()));
    } on http.ClientException catch (e) {
       attempt++;
      debugPrint('Client exception (attempt $attempt): $e');
      if (attempt >= maxRetries) rethrow;
      await Future.delayed(Duration(seconds: pow(2, attempt).toInt()));
    }
  }
  throw Exception('Failed after multiple retries');
}

Map<String, String> _parseZipAndExtractFilesToMap(List<int> zipBytes) {
  final archive = ZipDecoder().decodeBytes(zipBytes);
  final filesMap = <String, String>{};
  const allowedExtensions = {'.dart', '.yaml', '.json', '.md', '.txt', '.xml', '.gradle', '.properties', '.html', '.css', '.js', 'Dockerfile', '.gitignore'};
  for (final file in archive) {
    if (file.isFile && allowedExtensions.any((ext) => file.name.endsWith(ext))) {
      final pathParts = file.name.split('/');
      if (pathParts.length < 2) continue;
      final cleanPath = pathParts.sublist(1).join('/');
      if (cleanPath.isEmpty) continue;
      try {
        final content = utf8.decode(file.content as List<int>, allowMalformed: true);
        filesMap[cleanPath] = content;
      } catch (e) {
        debugPrint('Could not decode file: $cleanPath');
      }
    }
  }
  return filesMap;
}

String _parseZipAndExtractCode(List<int> zipBytes) {
  final archive = ZipDecoder().decodeBytes(zipBytes);
  final codeBuffer = StringBuffer();
  const allowedExtensions = {'.dart', '.yaml', '.json', '.md', '.txt', '.xml', '.gradle', '.properties', '.html', '.css', '.js', 'Dockerfile', '.gitignore'};
  for (final file in archive) {
    if (file.isFile && allowedExtensions.any((ext) => file.name.endsWith(ext))) {
      final pathParts = file.name.split('/');
      if (pathParts.length < 2) continue;
      final cleanPath = pathParts.sublist(1).join('/');
      if (cleanPath.isEmpty) continue;
      try {
        final content = utf8.decode(file.content as List<int>, allowMalformed: true);
        codeBuffer.writeln('--- START FILE: $cleanPath ---');
        codeBuffer.writeln(content);
        codeBuffer.writeln('--- END FILE ---\n');
      } catch (e) {
        debugPrint('Could not decode file: $cleanPath');
      }
    }
  }
  if (codeBuffer.isEmpty) {
    return "لم يتم العثور على ملفات برمجية قابلة للقراءة في المستودع. تأكد من أن الملفات موجودة في الفرع الرئيسي (main/master).";
  }
  return codeBuffer.toString();
}

class GitHubService {
  
  // --- إضافة: دالة جديدة للتحقق من صحة المستودع ---
  Future<bool> isValidRepository(String repoUrl) async {
    final uri = Uri.parse(repoUrl.replaceAll('.git', ''));
    if (uri.host != 'github.com' || uri.pathSegments.length < 2) {
      return false;
    }
    final repoPath = uri.pathSegments.take(2).join('/');
    final apiUrl = 'https://api.github.com/repos/$repoPath';

    try {
      final response = await http.get(Uri.parse(apiUrl)).timeout(const Duration(seconds: 15));
      // إذا كان الرمز 200، فالمستودع موجود وعام
      // إذا كان 404، فهو غير موجود أو خاص
      // إذا كان 301، فهو重定向، مما يعني أن اسم المستخدم/المستودع قد تغير، وهو صالح
      return response.statusCode == 200 || response.statusCode == 301;
    } catch (e) {
      // أي خطأ (مثل انقطاع الشبكة) يعتبر فشلاً في التحقق
      debugPrint('GitHub repo validation error: $e');
      return false;
    }
  }

  Future<Map<String, String>> fetchRepositoryFilesAsMap(String repoUrl) async {
    final uri = Uri.parse(repoUrl.replaceAll('.git', ''));
    if (uri.pathSegments.length < 2) {
      throw Exception('رابط مستودع GitHub غير صالح. يجب أن يكون بالصيغة: https://github.com/user/repo');
    }
    final repoPath = uri.pathSegments.take(2).join('/');
    final zipballUrl = 'https://api.github.com/repos/$repoPath/zipball/main';
    try {
      final http.Response response = await _retry(() async {
        final mainResponse = await http.get(Uri.parse(zipballUrl));
        if (mainResponse.statusCode == 200) return mainResponse;
        debugPrint('Branch "main" not found, trying "master"...');
        final masterZipballUrl = 'https://api.github.com/repos/$repoPath/zipball/master';
        final masterResponse = await http.get(Uri.parse(masterZipballUrl));
        if (masterResponse.statusCode == 200) return masterResponse;
        throw http.ClientException('فشل تحميل المستودع (رمز الخطأ: ${masterResponse.statusCode}). تأكد من أن المستودع عام وأن الفرع الرئيسي هو main أو master.', masterResponse.request?.url);
      });
      return await compute(_parseZipAndExtractFilesToMap, response.bodyBytes);
    } catch (e) {
      throw Exception('حدث خطأ غير متوقع: $e');
    }
  }

  Future<String> fetchRepositoryCodeAsString(String repoUrl) async {
    final uri = Uri.parse(repoUrl.replaceAll('.git', ''));
    if (uri.pathSegments.length < 2) {
      throw Exception('رابط مستودع GitHub غير صالح. يجب أن يكون بالصيغة: https://github.com/user/repo');
    }
    final repoPath = uri.pathSegments.take(2).join('/');
    final zipballUrl = 'https://api.github.com/repos/$repoPath/zipball/main';
    try {
      final http.Response response = await _retry(() async {
        final mainResponse = await http.get(Uri.parse(zipballUrl));
        if (mainResponse.statusCode == 200) return mainResponse;
        final masterZipballUrl = 'https://api.github.com/repos/$repoPath/zipball/master';
        final masterResponse = await http.get(Uri.parse(masterZipballUrl));
        if (masterResponse.statusCode == 200) return masterResponse;
        throw http.ClientException('فشل تحميل المستودع (رمز الخطأ: ${masterResponse.statusCode}). تأكد من أن المستودع عام وأن الفرع الرئيسي هو main أو master.', masterResponse.request?.url);
      });
      return await compute(_parseZipAndExtractCode, response.bodyBytes);
    } catch (e) {
      throw Exception('حدث خطأ غير متوقع: $e');
    }
  }
  
  Future<Map<String, String>> getLatestReleaseAssetInfo(String repoUrl) async {
    final uri = Uri.parse(repoUrl.replaceAll('.git', ''));
     if (uri.pathSegments.length < 2) throw Exception('رابط مستودع GitHub غير صالح.');
    final repoPath = uri.pathSegments.take(2).join('/');
    final apiUrl = 'https://api.github.com/repos/$repoPath/releases/latest';
    try {
      final response = await _retry(() => http.get(Uri.parse(apiUrl)).timeout(const Duration(seconds: 30)));
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        final assets = data['assets'] as List<dynamic>?;
        if (assets != null && assets.isNotEmpty) {
          final apkAsset = assets.firstWhere((asset) => (asset['name'] as String? ?? '').toLowerCase().endsWith('.apk'), orElse: () => null);
          if (apkAsset != null) {
            return {
              'downloadUrl': apkAsset['browser_download_url'] as String,
              'fileName': apkAsset['name'] as String,
              'releaseTag': data['tag_name'] as String? ?? 'Latest',
              'releaseBody': data['body'] as String? ?? 'لا يوجد وصف لهذا الإصدار.',
            };
          }
        }
        throw Exception('لم يتم العثور على ملف APK في آخر إصدار.');
      } else {
        throw Exception('فشل العثور على الإصدار الأخير (رمز الخطأ: ${response.statusCode}).');
      }
    } catch (e) {
      throw Exception('فشل جلب معلومات الإصدار: $e');
    }
  }
}
import 'dart:async';
import 'dart:convert';
import 'dart:io';
import 'dart:math';
import '../models/ai_chat_message.dart';
import '../models/project.dart';
import '../models/bug.dart';
import 'package:http/http.dart' as http;
import '../config.dart'; // استيراد قائمة المفاتيح

/// استثناء مخصص للاحتفاظ بحالة كود الخطأ HTTP.
class HttpExceptionWithStatusCode implements Exception {
  final String message;
  final int statusCode;

  HttpExceptionWithStatusCode(this.message, this.statusCode);

  @override
  String toString() => 'HttpException: $message, StatusCode: $statusCode';
}

/// استثناء مخصص لتجاوز حد الـ tokens.
class MaxTokensException implements Exception {
  final String message = "الطلب أو الرد تجاوز الحد الأقصى للـ tokens.";

  @override
  String toString() => message;
}

/// An exception thrown when all available API keys have failed.
class AllApiKeysFailedException implements Exception {
  final String message;
  AllApiKeysFailedException(this.message);

  @override
  String toString() => message;
}

class GeminiService {
  int _currentApiKeyIndex = 0;
  final _random = Random();

  String _getApiUrl(String model, String apiKey) {
    return 'https://generativelanguage.googleapis.com/v1beta/models/$model:generateContent?key=$apiKey';
  }

  String _parseTextFromResponse(http.Response response) {
    try {
      final data = jsonDecode(response.body);
      final candidates = data?['candidates'];

      if (candidates is List && candidates.isNotEmpty) {
        final candidate = candidates.first;
        final parts = candidate?['content']?['parts'];
        if (parts is List && parts.isNotEmpty) {
          final text = parts.first?['text'];
          if (text is String && text.isNotEmpty) {
            return text;
          }
        }
        
        final finishReason = candidate?['finishReason'];
        if (finishReason == 'SAFETY') {
          return "عذراً، لم أتمكن من إكمال الطلب لأنه يخالف سياسات السلامة.";
        }
        if (finishReason == 'MAX_TOKENS') {
          throw MaxTokensException();
        }
      }

      print("Could not parse valid text from Gemini response: ${response.body}");
      return "عذراً، لم يتمكن المساعد من إنشاء رد. قد يكون الرد فارغاً أو بتنسيق غير متوقع.";
    } catch (e) {
      if (e is MaxTokensException) {
        rethrow;
      }
      print("Error parsing Gemini response body: ${response.body}. Exception: $e");
      return "عذراً، حدث خطأ أثناء معالجة استجابة المساعد الذكي.";
    }
  }

  String _parseJsonFromResponse(http.Response response) {
      try {
        final data = jsonDecode(response.body);
        final candidates = data?['candidates'];

        if (candidates is List && candidates.isNotEmpty) {
          final candidate = candidates.first;
          final parts = candidate?['content']?['parts'];
          if (parts is List && parts.isNotEmpty) {
            final text = parts.first?['text'];
            if (text is String && text.isNotEmpty) {
              if (text.trim().startsWith('[') || text.trim().startsWith('{')) {
                  return text;
              }
            }
          }
          
          final finishReason = candidate?['finishReason'];
          if (finishReason == 'SAFETY') {
            return '[]'; 
          }
          if (finishReason == 'MAX_TOKENS') {
            throw MaxTokensException();
          }
        }
        
        print("Could not parse valid JSON from Gemini response: ${response.body}");
        return '[]';
      } catch (e) {
        if (e is MaxTokensException) {
          rethrow;
        }
        print("Error parsing Gemini JSON response body: ${response.body}. Exception: $e");
        return '[]';
      }
  }
  
  Future<String> _executeRequestAndParse({
    required String model,
    required Map<String, dynamic> body,
    required String Function(http.Response) parser,
  }) async {
    if (geminiApiKeys.isEmpty) {
      print('API keys list is empty.');
      throw Exception("فشل الاتصال: لا توجد مفاتيح API متاحة.");
    }

    final maxAttempts = geminiApiKeys.length;
    for (int i = 0; i < maxAttempts; i++) {
      int attemptIndex = (_currentApiKeyIndex + i) % maxAttempts;
      final apiKey = geminiApiKeys[attemptIndex];
      final apiUrl = _getApiUrl(model, apiKey);

      try {
        print('Using API Key index $attemptIndex');
        
        final response = await http.post(
          Uri.parse(apiUrl),
          headers: {'Content-Type': 'application/json'},
          body: jsonEncode(body),
        ).timeout(const Duration(seconds: 180));

        if (response.statusCode == 200) {
          final parsedResult = parser(response);
          _currentApiKeyIndex = attemptIndex;
          return parsedResult;
        }

        if ([429, 500, 503].contains(response.statusCode)) {
          print('Key index $attemptIndex failed with status ${response.statusCode}. Switching to the next key.');
          throw HttpExceptionWithStatusCode('Server is busy or rate-limited', response.statusCode);
        } else {
          final errorBody = jsonDecode(response.body);
          final errorMessage = errorBody['error']?['message'] ?? response.body;
          throw HttpExceptionWithStatusCode(errorMessage, response.statusCode);
        }

      } catch (e) {
        if (e is SocketException || e is TimeoutException || e is MaxTokensException || e is HttpExceptionWithStatusCode) {
          print('Encountered a retriable error with key index $attemptIndex: ${e.runtimeType}.');
          
          if (i < maxAttempts - 1) {
            final backoffSeconds = pow(2, i + 1).toInt(); 
            final jitterMilliseconds = _random.nextInt(1000);
            final waitDuration = Duration(seconds: backoffSeconds, milliseconds: jitterMilliseconds);
            
            print('Waiting for ${waitDuration.inSeconds} seconds before next attempt...');
            await Future.delayed(waitDuration);
          }
        } else {
          print('Encountered a non-retriable error: $e');
          rethrow;
        }
      }
    }

    _currentApiKeyIndex = (_currentApiKeyIndex + 1) % maxAttempts;
    print('All API keys and retry attempts have failed.');
    throw AllApiKeysFailedException(
      "فشل الاتصال بالمساعد الذكي بعد تجربة كل المفاتيح المتاحة. قد تكون الخدمة مضغوطة حالياً (خطأ 429/503). يرجى المحاولة مرة أخرى لاحقاً."
    );
  }
      Future<String> generalChat({
    required String userMessage,
    required Project? project,
    required List<Bug> bugs,
    required List<AiChatMessage> history,
    String? codeContext,
  }) async {
    String systemContext = '''
أنت "مساعد DevNest"، خبير برمجي متخصص في Flutter. مهمتك هي تحليل المشاكل وتقديم اقتراحات وحلول نصية فقط.
تحدث باللغة العربية بأسلوب احترافي ومباشر، ويجب ان لا يتخطى الرد 500 كلمة فقط مهما كان.
**قواعد صارمة جداً يجب اتباعها:**
1.  **ممنوع الأكواد نهائياً:** لا تقم أبداً بإدراج أي كود برمجي، أو مقتطفات، أو أسماء ملفات بتنسيق الكود. يجب أن يكون ردك نصاً شرحياً فقط.
2.  **التشخيص:** اشرح السبب الجذري للمشكلة أو الاستفسار بوضوح.
3.  **الاقتراح:** صف الحل المقترح شفهياً. يمكنك الإشارة إلى المفاهيم العامة أو الوظائف التي يجب تعديلها دون كتابة الكود الفعلي. مثلاً: "لتنفيذ ذلك، ستحتاج إلى تعديل الدالة المسؤولة عن الحفظ في قاعدة البيانات لتشمل حقل التاريخ."
''';
    if (project != null) {
      systemContext += '\n--- سياق المشروع الحالي ---\n';
      systemContext += 'الاسم: ${project.name}\n';
      systemContext += 'الوصف: ${project.description ?? "لا يوجد"}\n';
      if (bugs.isNotEmpty) {
        systemContext += '\nآخر الأخطاء المسجلة:\n';
        for (var bug in bugs.take(3)) {
          systemContext += '- "${bug.title}" (الحالة: ${bug.status})\n';
        }
      } else {
        systemContext += '\nلا توجد أخطاء مسجلة حالياً.\n';
      }
    }
    
    final List<Map<String, dynamic>> contents = history.map((msg) => {
        'role': msg.role,
        'parts': [{'text': msg.content}]
    }).toList();

    final body = {
      'contents': contents,
      'systemInstruction': {'parts': [{'text': systemContext}]},
      'generationConfig': {'temperature': 0.8, 'maxOutputTokens': 8192},
    };

    try {
      return await _executeRequestAndParse(
        model: 'gemini-2.5-pro',
        body: body,
        parser: _parseTextFromResponse,
      );
    } catch (e) {
      print('Gemini Service Exception (generalChat): $e');
      throw Exception(e.toString().replaceAll('Exception: ', ''));
    }
  }

  List<String> _splitTextIntoChunks(String text, {int chunkSize = 700000, int overlap = 20000}) {
    if (text.length <= chunkSize) {
      return [text];
    }
    final chunks = <String>[];
    int start = 0;
    while (start < text.length) {
      final end = start + chunkSize;
      final chunk = text.substring(start, end > text.length ? text.length : end);
      chunks.add(chunk);
      start += (chunkSize - overlap);
    }
    return chunks;
  }
  
  /// ✅ --- (دالة مساعدة جديدة) لتجميع نتائج المقتطفات من الأجزاء المختلفة ---
  String _synthesizeSnippetResults(List<String> partialAnalyses) {
    if (partialAnalyses.isEmpty) {
      return "لم يتم إنشاء أي رد.";
    }
    if (partialAnalyses.length == 1) {
      return partialAnalyses.first;
    }

    print("Synthesizing ${partialAnalyses.length} snippet chunks locally...");

    final fullExplanation = StringBuffer();
    final allChanges = <dynamic>[];
    const startDelimiter = '--- CODE CHANGES START ---';
    const endDelimiter = '--- CODE CHANGES END ---';

    final uniqueExplanations = <String>{};

    for (final analysis in partialAnalyses) {
      final startIndex = analysis.indexOf(startDelimiter);
      
      String explanation = (startIndex != -1) 
          ? analysis.substring(0, startIndex).trim()
          : analysis.trim();
      
      if (explanation.isNotEmpty) {
          final lines = explanation.split('\n');
          for(final line in lines) {
              if (line.trim().isNotEmpty && uniqueExplanations.add(line.trim())) {
                  fullExplanation.writeln(line);
              }
          }
      }

      if (startIndex != -1) {
          final endIndex = analysis.indexOf(endDelimiter, startIndex);
          if (endIndex != -1) {
              final jsonString = analysis
                  .substring(startIndex + startDelimiter.length, endIndex)
                  .trim();
              try {
                final List<dynamic> changes = jsonDecode(jsonString);
                allChanges.addAll(changes);
              } catch (e) {
                print('Error parsing JSON from chunk: $e');
              }
          }
      }
    }
    
    final finalResponse = StringBuffer();
    finalResponse.writeln(fullExplanation.toString().trim());
    finalResponse.writeln();
    finalResponse.writeln(startDelimiter);
    finalResponse.writeln(jsonEncode(allChanges));
    finalResponse.writeln(endDelimiter);

    return finalResponse.toString();
  }

  /// ✅ --- (مُعدَّل) الآن تحلل كل الملفات مباشرة دون خطوة اختيار ---
  Future<String> analyzeBugAndSuggestSnippetsFromAllFiles({
    required Bug bug,
    required Project project,
    required String codeContext, // تستقبل كل الكود كنص واحد
    required Function(String) onStatusUpdate,
  }) async {
    onStatusUpdate('الذكاء الاصطناعي يحلل كل ملفات المشروع...');
    
    const solutionSystemPrompt = '''
أنت "مساعد DevNest"، خبير برمجي في Flutter. مهمتك هي تحليل مشكلة وتقديم حل متكامل.
**قواعد صارمة جداً للإخراج:**
1.  **الشرح أولاً:** ابدأ دائماً بشرح نصي واضح للمشكلة والحل المقترح بتنسيق Markdown.
2.  **محدد الأكواد:** بعد الشرح، أضف محدداً واضحاً: `--- CODE CHANGES START ---`.
3.  **تنسيق JSON:** بعد المحدد، ضع مصفوفة JSON صالحة. كل عنصر في المصفوفة يجب أن يكون كائناً يحتوي على ثلاثة مفاتيح: `file_path` (string)، `description` (string)، و `code_snippet` (string).
4.  **المحدد النهائي:** اختتم بمحدد `--- CODE CHANGES END ---`.
5.  **ممنوع الإضافات:** لا تضع أي نص أو تعليقات قبل أو بعد محددات بداية ونهاية الأكواد.
''';

    final partialAnalyses = <String>[];
    final codeChunks = _splitTextIntoChunks(codeContext, chunkSize: 700000, overlap: 20000);

    for (int i = 0; i < codeChunks.length; i++) {
        onStatusUpdate('جاري تحليل الجزء ${i + 1} من ${codeChunks.length} من الكود...');
        final chunk = codeChunks[i];
        final solutionUserPrompt = '''
--- تفاصيل المشكلة ---
العنوان: "${bug.title}"
الوصف: "${bug.description}"
--- سياق الكود من المشروع الكامل (الجزء ${i + 1}/${codeChunks.length}) ---
$chunk
--- نهاية السياق ---
المهمة: قم بتحليل المشكلة واقتراح **مقتطفات كود** للحل حسب القواعد الصارمة المحددة. لا تقم بإرجاع ملفات كاملة.
''';
        final solutionBody = {
            'contents': [{'parts': [{'text': solutionUserPrompt}]}],
            'systemInstruction': {'parts': [{'text': solutionSystemPrompt}]},
            'generationConfig': {'temperature': 0.7, 'maxOutputTokens': 8192},
        };
        try {
            final result = await _executeRequestAndParse(model: 'gemini-2.5-pro', body: solutionBody, parser: _parseTextFromResponse);
            partialAnalyses.add(result);
        } catch (e) {
            print('Gemini Service Exception during full context analysis: $e');
            partialAnalyses.add("--- فشل تحليل الجزء ${i+1}: ${e.toString().replaceAll('Exception: ', '')} ---");
        }
    }
    
    return _synthesizeSnippetResults(partialAnalyses);
  }

  Future<String> performCodeAudit({
    required String codeContext,
    required String auditType,
    required List<Bug> existingBugs,
    required Function(String) onStatusUpdate,
  }) async {
    final auditDescription = auditType == 'bugs'
        ? 'ابحث عن الأخطاء المحتملة والمشاكل المنطقية فقط. يجب أن تكون أنواع النتائج "حرج" أو "بسيط" حصراً.'
        : 'اقترح تحسينات على الكود، إعادة هيكلة، أو ميزات جديدة. يجب أن يكون نوع كل النتائج "تحسين" حصراً.';
    final allowedTypes = auditType == 'bugs'
        ? '"حرج", "بسيط"'
        : '"تحسين"';
    final systemPrompt = '''
أنت "Code Auditor"، خبير دقيق جداً في تحليل شيفرة Flutter.
مهمتك هي فحص الكود المقدم، ومقارنته بقائمة المشاكل المسجلة حالياً، وتقديم قائمة بالمشاكل **الجديدة كلياً** فقط، على هيئة JSON.
**قواعد صارمة جداً للإخراج:**
1.  **JSON فقط:** يجب أن يكون ردك عبارة عن سلسلة JSON صالحة وقابلة للتحليل **فقط**. لا تضف أي نص توضيحي أو علامات ```json```.
2.  **الدقة المطلقة:** تحقق من كل خطأ تقترحه بعناية فائقة. يجب أن تكون الأخطاء حقيقية ومنطقية وموجودة في الكود. لا تخمن أبداً.
3.  **تجنب التكرار (الأهم):**
    * **اقرأ "قائمة المشاكل الحالية" جيداً.**
    * **لا تقترح أي مشكلة لها نفس المعنى أو المفهوم لمشكلة موجودة بالفعل**، حتى لو كانت بصياغة مختلفة.
    * مهمتك هي إيجاد مشاكل **مختلفة وجديدة تماماً**.
4.  **الرد الفارغ:** إذا لم تجد أي أخطاء أو تحسينات **جديدة ومهمة** بعد تحليلك الدقيق، قم بإرجاع مصفوفة JSON فارغة: `[]`. هذا رد مقبول ومطلوب عند عدم وجود جديد.
5.  **هيكل الـ JSON:** يجب أن يكون الـ JSON عبارة عن مصفوفة (array) من الكائنات (objects). كل كائن يجب أن يحتوي على الحقول الثلاثة التالية: `title` (String), `description` (String), `type` (String must be one of [$allowedTypes]).
''';

    final codeChunks = _splitTextIntoChunks(codeContext);
    if (codeChunks.isEmpty) {
       return "[]";
    }
    
    final allNewBugs = <Map<String, dynamic>>[];
    final uniqueTitles = <String>{};
    for (var bug in existingBugs) {
      uniqueTitles.add(bug.title);
    }

    for (int i = 0; i < codeChunks.length; i++) {
        final statusMsg = 'جاري فحص الجزء ${i + 1} من ${codeChunks.length}...';
        print(statusMsg);
        onStatusUpdate(statusMsg);

        final chunk = codeChunks[i];
        final currentBugsList = existingBugs.map((b) => '- العنوان: ${b.title}\n  الوصف: ${b.description}').toList()
          ..addAll(allNewBugs.map((b) => '- العنوان: ${b['title']}\n  الوصف: ${b['description']}'));
        
        final chunkUserPrompt = '''
--- كود المشروع (الجزء ${i + 1}/${codeChunks.length}) ---
$chunk
--- نهاية كود المشروع ---
--- قائمة المشاكل الحالية (لا تقم بتكرار أي شيء منها أو ما يشبهها في المعنى) ---
${currentBugsList.isEmpty ? 'لا توجد مشاكل مسجلة حالياً.' : currentBugsList.join('\n')}
--- نهاية القائمة ---
المهمة: $auditDescription
الرجاء تحليل هذا الجزء من الكود وإرجاع النتائج بصيغة JSON حسب القواعد الصارمة المحددة.
''';

        final chunkBody = {
          'contents': [{'parts': [{'text': chunkUserPrompt}]}],
          'systemInstruction': {'parts': [{'text': systemPrompt}]},
          'generationConfig': { 'temperature': 0.5, 'maxOutputTokens': 8192, 'responseMimeType': 'application/json' },
        };
        
        try {
            final jsonStringResult = await _executeRequestAndParse(model: 'gemini-2.5-pro', body: chunkBody, parser: _parseJsonFromResponse);
            final List<dynamic> parsedJson = jsonDecode(jsonStringResult);
            for (var item in parsedJson) {
                if (item is Map<String, dynamic> && item.containsKey('title')) {
                   final title = item['title'] as String;
                   if (uniqueTitles.add(title)) {
                      allNewBugs.add(item);
                   }
                }
            }
        } catch (e) {
            print('Gemini Service Exception during chunk ${i+1} audit: $e');
        }
    }
    
    return jsonEncode(allNewBugs);
  }

  /// ✅ --- (دالة جديدة) للتحقق مما إذا كان قد تم حل خطأ معين ---
  Future<String> verifyFixInCode({
    required Bug bug,
    required String codeContext,
    required Function(String) onStatusUpdate,
  }) async {
    onStatusUpdate('الذكاء الاصطناعي يقرأ الكود للتحقق من الحل...');
    
    final systemPrompt = '''
أنت "مدقق جودة برمجيات"، خبير دقيق في تحليل شيفرة Flutter للتحقق من إصلاح الأخطاء.
مهمتك هي قراءة وصف مشكلة، ثم فحص الكود المقدم لتحديد ما إذا كانت المشكلة قد تم حلها بشكل فعال.
**قواعد صارمة جداً للإخراج:**
1.  **JSON فقط:** يجب أن يكون ردك عبارة عن سلسلة JSON صالحة وقابلة للتحليل **فقط**. لا تضف أي نص توضيحي أو علامات ```json```.
2.  **الدقة المطلقة:** قرارك يجب أن يكون مبنياً على دليل واضح في الكود. لا تخمن أبداً.
3.  **هيكل الـ JSON:** يجب أن يكون الـ JSON عبارة عن كائن (object) يحتوي على حقلين بالضبط: `resolved` (boolean), `reasoning` (String، شرح مختصر ومباشر لقرارك، لا يتجاوز 50 كلمة).
4.  **مثال للرد الصحيح:** `{"resolved": true, "reasoning": "تمت إضافة معالج الحالة المفقود في ملف user_controller.dart مما يمنع حدوث العطل عند فشل الشبكة."}`
5.  **مثال لرد خاطئ:** `{"resolved": false, "reasoning": "الكود المسؤول عن المشكلة في ملف api_service.dart لم يتغير."}`
''';

    final codeChunks = _splitTextIntoChunks(codeContext, chunkSize: 700000, overlap: 20000);
    if (codeChunks.isEmpty) {
       return '{"resolved": false, "reasoning": "لم يتم العثور على كود لتحليله."}';
    }
    
    final partialAnalyses = <String>[];

    for (int i = 0; i < codeChunks.length; i++) {
        onStatusUpdate('جاري تحليل الجزء ${i + 1} من ${codeChunks.length} من الكود...');
        final chunk = codeChunks[i];
        
        final analysisPrompt = '''
--- تفاصيل المشكلة ---
العنوان: "${bug.title}"
الوصف: "${bug.description}"
--- سياق الكود من المشروع الكامل (الجزء ${i + 1}/${codeChunks.length}) ---
$chunk
--- نهاية السياق ---
المهمة: قم بتحليل هذا الجزء من الكود. هل تجد فيه دليلاً على حل المشكلة الموصوفة أعلاه؟ قدم ملخصاً من جملة واحدة فقط عن النتائج التي توصلت إليها في هذا الجزء تحديداً.
''';

        final analysisBody = {
            'contents': [{'parts': [{'text': analysisPrompt}]}],
            'systemInstruction': {'parts': [{'text': 'أنت محلل كود مساعد. مهمتك هي تقديم ملخصات قصيرة جداً.'}]},
            'generationConfig': {'temperature': 0.3, 'maxOutputTokens': 2048},
        };
        try {
            final result = await _executeRequestAndParse(model: 'gemini-2.5-pro', body: analysisBody, parser: _parseTextFromResponse);
            partialAnalyses.add("ملخص الجزء ${i + 1}: " + result);
        } catch (e) {
            print('Gemini Service Exception during verification chunk analysis: $e');
        }
    }
    
    onStatusUpdate('تجميع النتائج وإصدار القرار النهائي...');
    final synthesisPrompt = '''
--- تفاصيل المشكلة ---
العنوان: "${bug.title}"
الوصف: "${bug.description}"
--- ملخصات تحليل أجزاء الكود ---
${partialAnalyses.join('\n---\n')}
--- نهاية الملخصات ---
المهمة: بناءً على ملخصات التحليل أعلاه، اتخذ قراراً نهائياً. هل تم حل المشكلة؟ أجب بصيغة JSON حسب القواعد الصارمة المحددة لك.
''';
    
    final finalBody = {
        'contents': [{'parts': [{'text': synthesisPrompt}]}],
        'systemInstruction': {'parts': [{'text': systemPrompt}]},
        'generationConfig': {'temperature': 0.5, 'maxOutputTokens': 2048, 'responseMimeType': 'application/json'},
    };
    
    try {
        final jsonStringResult = await _executeRequestAndParse(model: 'gemini-2.5-pro', body: finalBody, parser: _parseJsonFromResponse);
        // Basic validation
        jsonDecode(jsonStringResult);
        return jsonStringResult;
    } catch (e) {
        print('Gemini Service Exception during final verification: $e');
        return '{"resolved": false, "reasoning": "حدث خطأ أثناء محاولة التحقق من الحل. $e"}';
    }
  }
}
import 'dart:async';
import 'package:flutter/material.dart';
import '../services/supabase_service.dart';
import '../models/project.dart';
import '../widgets/app_dialogs.dart';

class NotificationSettingsScreen extends StatefulWidget {
  const NotificationSettingsScreen({super.key});

  @override
  State<NotificationSettingsScreen> createState() =>
      _NotificationSettingsScreenState();
}

class _NotificationSettingsScreenState
    extends State<NotificationSettingsScreen> {
  final SupabaseService _supabaseService = SupabaseService();
  bool _isLoading = true;
  // --- تعديل: تتبع حالة الحفظ لكل مفتاح ---
  final Map<String, bool> _savingStatus = {};
  Timer? _debounce;

  bool _allNotifications = true;
  bool _chatNotifications = true;
  bool _broadcasts = true;
  bool _projectUpdates = true;
  Map<String, bool> _projectSpecificNotifications = {};

  @override
  void initState() {
    super.initState();
    _loadSettings();
  }

  @override
  void dispose() {
    _debounce?.cancel();
    super.dispose();
  }

  Future<void> _loadSettings() async {
    setState(() => _isLoading = true);
    try {
      final prefs = await _supabaseService.getNotificationPreferences();
      final projects = await _supabaseService.getProjects();

      for (var p in projects) {
        _projectSpecificNotifications.putIfAbsent(p.id, () => true);
      }

      prefs.forEach((key, value) {
        if (key == 'all') _allNotifications = value;
        if (key == 'chat') _chatNotifications = value;
        if (key == 'broadcast') _broadcasts = value;
        if (key == 'project_all') _projectUpdates = value;
        if (key.startsWith('project_')) {
          final projectId = key.replaceFirst('project_', '');
          if (_projectSpecificNotifications.containsKey(projectId)) {
            _projectSpecificNotifications[projectId] = value;
          }
        }
      });
    } catch (e) {
      if (mounted) {
        showErrorDialog(context, 'فشل تحميل الإعدادات: $e');
      }
    } finally {
      if (mounted) {
        setState(() => _isLoading = false);
      }
    }
  }
  
  // --- تعديل: الحفظ التلقائي عند التغيير مع debounce ---
  void _updatePreference(String key, bool value) {
    setState(() {
      _savingStatus[key] = true;
    });

    if (_debounce?.isActive ?? false) _debounce!.cancel();
    _debounce = Timer(const Duration(milliseconds: 700), () async {
      try {
        final Map<String, bool> preferenceToSave = {key: value};
        await _supabaseService.saveNotificationPreferences(preferenceToSave);
      } catch (e) {
        if (mounted) {
          showErrorDialog(context, 'فشل حفظ الإعدادات: $e');
        }
      } finally {
        if (mounted) {
          setState(() {
            _savingStatus.remove(key);
          });
        }
      }
    });
  }


  @override
  Widget build(BuildContext context) {
    // --- تعديل: عرض مؤشر الحفظ في العنوان ---
    bool isCurrentlySaving = _savingStatus.containsValue(true);
    
    return Scaffold(
      appBar: AppBar(
        title: Row(
          children: [
            const Text('إعدادات الإشعارات'),
            if (isCurrentlySaving) ...[
              const SizedBox(width: 10),
              const SizedBox(
                width: 15,
                height: 15,
                child: CircularProgressIndicator(strokeWidth: 2),
              ),
            ]
          ],
        ),
      ),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : FutureBuilder<List<Project>>(
              future: _supabaseService.getProjects(),
              builder: (context, snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting &&
                    _projectSpecificNotifications.isEmpty) {
                  return const Center(child: CircularProgressIndicator());
                }

                final projects = snapshot.data ?? [];

                return ListView(
                  padding: const EdgeInsets.all(16.0),
                  children: [
                    _buildSectionTitle('الإعدادات العامة'),
                    _buildGeneralToggles(),
                    const Divider(height: 32),
                    _buildSectionTitle('إشعارات المشاريع'),
                    _buildProjectMasterToggle(),
                    if (projects.isEmpty)
                      const Center(child: Text('لا توجد مشاريع لعرضها.'))
                    else
                      _buildProjectToggles(projects),
                  ],
                );
              },
            ),
    );
  }

  Widget _buildGeneralToggles() {
    return Column(
      children: [
        SwitchListTile(
          title: const Text('تلقي كل الإشعارات'),
          value: _allNotifications,
          onChanged: (value) {
            setState(() {
              _allNotifications = value;
              if (!value) {
                _chatNotifications = false;
                _broadcasts = false;
                _projectUpdates = false;
                _projectSpecificNotifications.updateAll((key, _) => false);
              }
            });
            _updatePreference('all', value);
          },
        ),
        SwitchListTile(
          title: const Text('إشعارات المحادثات'),
          value: _chatNotifications,
          onChanged: _allNotifications
              ? (v) {
                  setState(() => _chatNotifications = v);
                  _updatePreference('chat', v);
                }
              : null,
        ),
        SwitchListTile(
          title: const Text('رسائل الفريق العامة'),
          value: _broadcasts,
          onChanged: _allNotifications
              ? (v) {
                  setState(() => _broadcasts = v);
                   _updatePreference('broadcast', v);
                }
              : null,
        ),
      ],
    );
  }

  Widget _buildProjectMasterToggle() {
    return SwitchListTile(
      title: const Text('تلقي كل إشعارات المشاريع'),
      value: _projectUpdates,
      onChanged: _allNotifications
          ? (value) {
              setState(() {
                _projectUpdates = value;
                if (!value) {
                  _projectSpecificNotifications.updateAll((key, _) => false);
                }
              });
              _updatePreference('project_all', value);
            }
          : null,
    );
  }

  Widget _buildProjectToggles(List<Project> projects) {
    return Padding(
      padding: const EdgeInsets.only(right: 16.0),
      child: Column(
        children: projects.map((project) {
          return SwitchListTile(
            title: Text(project.name, overflow: TextOverflow.ellipsis),
            value: _projectSpecificNotifications[project.id] ?? true,
            onChanged: _allNotifications && _projectUpdates
                ? (value) {
                    setState(
                        () => _projectSpecificNotifications[project.id] = value);
                     _updatePreference('project_${project.id}', value);
                  }
                : null,
          );
        }).toList(),
      ),
    );
  }

  Widget _buildSectionTitle(String title) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 8.0, right: 8.0),
      child: Text(
        title,
        style: Theme.of(context).textTheme.titleMedium?.copyWith(
              color: Theme.of(context).primaryColor,
              fontWeight: FontWeight.bold,
            ),
      ),
    );
  }
}

import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../services/supabase_service.dart';
import 'home_screen.dart';
import '../widgets/app_dialogs.dart';

class InitialHubScreen extends StatefulWidget {
  const InitialHubScreen({super.key});

  @override
  State<InitialHubScreen> createState() => _InitialHubScreenState();
}

class _InitialHubScreenState extends State<InitialHubScreen> {
  final SupabaseService _supabaseService = SupabaseService();
  final _nameController = TextEditingController();
  bool _isLoading = false;
  bool _nameEntered = false;

  @override
  void dispose() {
    _nameController.dispose();
    super.dispose();
  }

  Future<void> _navigateToHome() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool('hub_setup_complete', true);

    if (mounted) {
      // ✅ --- (تعديل): تمرير المفتاح العام لـ HomeScreen ---
      // هذا التغيير يضمن أن خدمة الإشعارات يمكنها العثور على الواجهة الرئيسية والتحكم بها.
      Navigator.of(context).pushReplacement(
        MaterialPageRoute(builder: (context) => HomeScreen(key: homeScreenKey)),
      );
    }
  }

  void _showCreateHubDialog() {
    final hubNameController = TextEditingController();
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) {
        bool isCreating = false;
        return StatefulBuilder(
          builder: (context, setStateDialog) {
            return AlertDialog(
              title: const Text('إنشاء Hub جديد'),
              content: TextField(
                controller: hubNameController,
                decoration: const InputDecoration(labelText: 'اسم الـ Hub'),
                autofocus: true,
              ),
              actions: [
                TextButton(
                  onPressed: isCreating ? null : () => Navigator.pop(context),
                  child: const Text('إلغاء'),
                ),
                ElevatedButton(
                  onPressed: isCreating
                      ? null
                      : () async {
                          if (hubNameController.text.trim().isEmpty) {
                            showErrorDialog(context, 'الرجاء إدخال اسم للـ Hub');
                            return;
                          }
                          setStateDialog(() => isCreating = true);
                          try {
                            final secretCode = await _supabaseService.createHub(
                                hubNameController.text.trim(),
                                _nameController.text.trim());
                            if (mounted) {
                              Navigator.pop(context); // Close create dialog
                              await _showHubCreatedDialog(
                                  hubNameController.text.trim(), secretCode);
                            }
                            await _navigateToHome();
                          } catch (e) {
                            if (mounted) {
                              showErrorDialog(context, 'فشل إنشاء الـ Hub: $e');
                            }
                          } finally {
                            if (mounted) {
                              setStateDialog(() => isCreating = false);
                            }
                          }
                        },
                  child: isCreating
                      ? const SizedBox(
                          height: 20,
                          width: 20,
                          child: CircularProgressIndicator(strokeWidth: 2),
                        )
                      : const Text('إنشاء'),
                ),
              ],
            );
          },
        );
      },
    );
  }

  Future<void> _showHubCreatedDialog(String hubName, String secretCode) {
    return showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        title: Text('تم إنشاء "$hubName" بنجاح!'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text('هذا هو الرمز السري للانضمام. شاركه مع فريقك:'),
            const SizedBox(height: 16),
            Center(
              child: SelectableText(
                secretCode,
                style:
                    const TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
              ),
            ),
            const SizedBox(height: 8),
            const Text(
              'ملاحظة: لا يمكن استعادة هذا الرمز، احتفظ به في مكان آمن.',
              style: TextStyle(fontSize: 12),
            ),
          ],
        ),
        actions: [
          ElevatedButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('فهمت، لنبدأ!'),
          )
        ],
      ),
    );
  }

  void _showJoinHubDialog() {
    final codeController = TextEditingController();
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) {
        bool isJoining = false;
        return StatefulBuilder(
          builder: (context, setStateDialog) {
            return AlertDialog(
              title: const Text('الانضمام إلى Hub'),
              content: TextField(
                controller: codeController,
                decoration:
                    const InputDecoration(labelText: 'الرمز السري للـ Hub'),
                autofocus: true,
              ),
              actions: [
                TextButton(
                  onPressed: isJoining ? null : () => Navigator.pop(context),
                  child: const Text('إلغاء'),
                ),
                ElevatedButton(
                  onPressed: isJoining
                      ? null
                      : () async {
                          final code = codeController.text.trim();
                          if (code.isEmpty) {
                            showErrorDialog(context, 'الرجاء إدخال الرمز السري');
                            return;
                          }

                          setStateDialog(() => isJoining = true);

                          try {
                            await _supabaseService.joinHub(
                                code, _nameController.text.trim());

                            if (mounted) {
                              Navigator.pop(context); // Close dialog on success
                            }
                            await _navigateToHome();
                          } catch (e) {
                            var errorMessage = e
                                .toString()
                                .replaceFirst('Exception: ', '');
                            if (errorMessage.contains(
                                'Hub not found with this secret code')) {
                              errorMessage =
                                  'الرمز السري الذي أدخلته غير صحيح. الرجاء التأكد منه والمحاولة مرة أخرى.';
                            } else if (errorMessage.contains(
                                'You are already a member of this hub')) {
                              errorMessage = 'أنت بالفعل عضو في هذا الـ Hub.';
                            }
                            if (mounted) {
                              showErrorDialog(
                                  context, 'فشل الانضمام: $errorMessage');
                            }
                          } finally {
                            if (mounted) {
                              setStateDialog(() => isJoining = false);
                            }
                          }
                        },
                  child: isJoining
                      ? const SizedBox(
                          height: 20,
                          width: 20,
                          child: CircularProgressIndicator(strokeWidth: 2),
                        )
                      : const Text('انضمام'),
                ),
              ],
            );
          },
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Center(
        child: _isLoading
            ? const CircularProgressIndicator()
            : SingleChildScrollView(
                child: Padding(
                  padding: const EdgeInsets.all(32.0),
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      const Icon(Icons.hub, size: 80),
                      const SizedBox(height: 24),
                      Text(
                        'مرحباً بك في DevNest',
                        style: Theme.of(context).textTheme.headlineSmall,
                      ),
                      const SizedBox(height: 16),
                      Text(
                        'ابدأ بكتابة اسمك، ثم قم بإنشاء Hub جديد لفريقك أو انضم إلى Hub موجود.',
                        textAlign: TextAlign.center,
                        style: Theme.of(context).textTheme.bodyMedium,
                      ),
                      const SizedBox(height: 32),
                      TextField(
                        controller: _nameController,
                        decoration: const InputDecoration(
                          labelText: 'اسمك الذي سيظهر للآخرين',
                          prefixIcon: Icon(Icons.person_outline),
                        ),
                        onChanged: (value) {
                          setState(() {
                            _nameEntered = value.trim().isNotEmpty;
                          });
                        },
                      ),
                      const SizedBox(height: 32),
                      SizedBox(
                        width: double.infinity,
                        child: ElevatedButton.icon(
                          icon: const Icon(Icons.add_circle_outline),
                          label: const Text('إنشاء Hub جديد'),
                          onPressed: _nameEntered ? _showCreateHubDialog : null,
                          style: ElevatedButton.styleFrom(
                              padding: const EdgeInsets.all(16)),
                        ),
                      ),
                      const SizedBox(height: 16),
                      SizedBox(
                        width: double.infinity,
                        child: OutlinedButton.icon(
                          icon: const Icon(Icons.login),
                          label: const Text('الانضمام إلى Hub'),
                          onPressed: _nameEntered ? _showJoinHubDialog : null,
                          style: OutlinedButton.styleFrom(
                              padding: const EdgeInsets.all(16)),
                        ),
                      ),
                    ],
                  ),
                ),
              ),
      ),
    );
  }
}
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../models/hub.dart';
import '../models/hub_member.dart';
import '../services/supabase_service.dart';
import '../widgets/app_dialogs.dart';
import 'initial_hub_screen.dart';

class HubManagementScreen extends StatefulWidget {
  final Hub hub;
  const HubManagementScreen({super.key, required this.hub});

  @override
  State<HubManagementScreen> createState() => _HubManagementScreenState();
}

class _HubManagementScreenState extends State<HubManagementScreen> {
  final SupabaseService _supabaseService = SupabaseService();
  late Stream<List<Map<String, dynamic>>> _membersStream;
  bool _isDeletingHub = false;

  final _broadcastController = TextEditingController();
  final _broadcastFormKey = GlobalKey<FormState>();
  bool _isSendingBroadcast = false;

  @override
  void initState() {
    super.initState();
    _membersStream = _supabaseService.getHubMembersStream(widget.hub.id);
  }

  @override
  void dispose() {
    _broadcastController.dispose();
    super.dispose();
  }

  Future<void> _updatePermissions(HubMember member,
      {bool? canAdd,
      bool? canEdit,
      bool? canChat,
      bool? canAddProj,
      bool? canAudit,
      bool? canBroadcast, // --- إضافة: متغير صلاحية الإشعارات ---
      }) async {
    try {
      await _supabaseService.updateMemberPermissions(
        memberId: member.id,
        canAddBugs: canAdd ?? member.canAddBugs,
        canEditBugs: canEdit ?? member.canEditBugs,
        canUseChat: canChat ?? member.canUseChat,
        canManageProjects: canAddProj ?? member.canManageProjects,
        canUseAiAudit: canAudit ?? member.canUseAiAudit,
        // --- إضافة: تمرير الصلاحية الجديدة ---
        canSendBroadcasts: canBroadcast ?? member.canSendBroadcasts,
      );
      if (mounted) {
        showSuccessDialog(context, 'تم تحديث الصلاحيات بنجاح.');
      }
    } catch (e) {
      if (mounted) {
        showErrorDialog(context, 'فشل تحديث الصلاحيات: $e');
      }
    }
  }

  Future<void> _editDisplayName(HubMember member) async {
    final nameController = TextEditingController(text: member.displayName);
    final newName = await showDialog<String>(
      context: context, barrierDismissible: false,
      builder: (context) => AlertDialog(
        title: const Text('تعديل اسم العضو'),
        content: TextField(controller: nameController, autofocus: true, decoration: const InputDecoration(hintText: 'أدخل الاسم الجديد')),
        actions: [
          TextButton(onPressed: () => Navigator.pop(context), child: const Text('إلغاء')),
          FilledButton(onPressed: () => Navigator.pop(context, nameController.text.trim()), child: const Text('حفظ')),
        ],
      ),
    );

    if (newName != null && newName.isNotEmpty) {
      try {
        await _supabaseService.updateMemberDisplayName(memberId: member.id, newName: newName);
      } catch (e) {
        if (mounted) showErrorDialog(context, 'فشل تحديث الاسم: $e');
      }
    }
  }

  Future<void> _removeMember(HubMember member) async {
    final confirm = await showDialog<bool>(
        context: context, barrierDismissible: false,
        builder: (context) => AlertDialog(
              title: const Text('تأكيد الطرد'),
              content: Text('هل أنت متأكد من رغبتك في طرد "${member.displayName ?? 'هذا العضو'}"؟ سيتم تغيير الرمز السري للـ Hub بعد هذا الإجراء.'),
              actions: [
                TextButton(onPressed: () => Navigator.pop(context, false), child: const Text('إلغاء')),
                TextButton(onPressed: () => Navigator.pop(context, true), child: const Text('طرد وتغيير الرمز', style: TextStyle(color: Colors.red))),
              ],
            ));

    if (confirm == true) {
      try {
        await _supabaseService.removeMember(member.id);
        if (mounted) showSuccessDialog(context, 'تم طرد العضو وتحديث رمز الـ Hub بنجاح.');
      } catch (e) {
        if (mounted) showErrorDialog(context, 'فشل طرد العضو: $e');
      }
    }
  }

  Future<void> _deleteHub() async {
    final members = await _supabaseService.getHubMembers(widget.hub.id);
    if (members.length > 1) {
      showErrorDialog(context, 'لا يمكنك حذف الـ Hub بوجود أعضاء آخرين. الرجاء طرد جميع الأعضاء أولاً.');
      return;
    }

    final hubNameController = TextEditingController();
    final confirm = await showDialog<bool>(
      context: context, barrierDismissible: false,
      builder: (context) => AlertDialog(
        title: Text('حذف Hub "${widget.hub.name}"'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            const Text('هذا الإجراء نهائي ولا يمكن التراجع عنه. سيتم حذف جميع المشاريع والأخطاء والبيانات المرتبطة بهذا الـ Hub.'),
            const SizedBox(height: 16),
            Text('للتأكيد، الرجاء كتابة اسم الـ Hub: "${widget.hub.name}"'), const SizedBox(height: 8),
            TextField(controller: hubNameController, decoration: InputDecoration(hintText: widget.hub.name))
          ],
        ),
        actions: [
          TextButton(onPressed: () => Navigator.pop(context, false), child: const Text('إلغاء')),
          ValueListenableBuilder<TextEditingValue>(
            valueListenable: hubNameController,
            builder: (context, value, child) {
              return FilledButton(
                style: FilledButton.styleFrom(backgroundColor: Colors.red.shade700),
                onPressed: value.text == widget.hub.name ? () => Navigator.pop(context, true) : null,
                child: const Text('حذف نهائي'),
              );
},
          ),
        ],
      ),
    );

    if (confirm == true) {
      setState(() => _isDeletingHub = true);
      try {
        await _supabaseService.deleteHub(widget.hub.id);
        final prefs = await SharedPreferences.getInstance();
        await prefs.setBool('hub_setup_complete', false);
        if (mounted) {
          Navigator.of(context).pushAndRemoveUntil(MaterialPageRoute(builder: (context) => const InitialHubScreen()), (route) => false);
        }
      } catch (e) {
        if (mounted) showErrorDialog(context, 'فشل حذف الـ Hub: ${e.toString()}');
      } finally {
        if (mounted) setState(() => _isDeletingHub = false);
      }
    }
  }

  Future<void> _sendBroadcast() async {
    if (_broadcastFormKey.currentState?.validate() ?? false) {
      setState(() => _isSendingBroadcast = true);
      try {
        await _supabaseService.sendBroadcastNotification(_broadcastController.text.trim());
        if (mounted) {
          _broadcastController.clear();
          showSuccessDialog(context, 'تم إرسال الإشعار لجميع الأعضاء بنجاح.');
        }
      } catch (e) {
        if (mounted) showErrorDialog(context, 'فشل إرسال الإشعار: $e');
      } finally {
        if (mounted) setState(() => _isSendingBroadcast = false);
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('إدارة Hub "${widget.hub.name}"'),
      ),
      body: _isDeletingHub
          ? const Center(child: Column(mainAxisAlignment: MainAxisAlignment.center, children: [CircularProgressIndicator(), SizedBox(height: 16), Text('جاري حذف الـ Hub...')]))
          : StreamBuilder<List<Map<String,dynamic>>>(
              stream: _membersStream,
              builder: (context, snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return const Center(child: CircularProgressIndicator());
                }
                if (snapshot.hasError) return Center(child: Text('خطأ: ${snapshot.error}'));
                if (!snapshot.hasData || snapshot.data!.isEmpty) return const Center(child: Text('لا يوجد أعضاء في هذا الـ Hub.'));
                
                final members = snapshot.data!.map((json) => HubMember.fromJson(json)).toList();
                final currentUser = _supabaseService.currentUserId;

                return ListView(
                  children: [
                    _buildBroadcastCard(),
                    ...members.map((member) {
                      final isLeader = member.role == 'leader';
                      final isCurrentUser = member.userId == currentUser;
                      return Card(
                        margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                        child: Padding(
                          padding: const EdgeInsets.all(16.0),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Row(
                                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                children: [
                                  Expanded(
                                    child: Column(
                                      crossAxisAlignment: CrossAxisAlignment.start,
                                      children: [
                                        Row(
                                          children: [
                                            Expanded(child: Text(member.displayName ?? 'عضو غير مسمى', style: const TextStyle(fontWeight: FontWeight.bold, fontSize: 16), overflow: TextOverflow.ellipsis)),
                                            if (!isLeader) IconButton(icon: const Icon(Icons.edit_outlined, size: 18), onPressed: () => _editDisplayName(member), tooltip: 'تعديل الاسم')
                                          ],
                                        ),
                                        if (isLeader) const Chip(label: Text('قائد'), backgroundColor: Colors.blueGrey, padding: EdgeInsets.zero, visualDensity: VisualDensity.compact)
                                        else if (isCurrentUser) const Chip(label: Text('أنت'), backgroundColor: Colors.purple, padding: EdgeInsets.zero, visualDensity: VisualDensity.compact),
                                      ],
                                    ),
                                  ),
                                  if (!isLeader) IconButton(icon: const Icon(Icons.person_remove_outlined), color: Colors.orange.shade300, tooltip: 'طرد العضو', onPressed: () => _removeMember(member))
                                ],
                              ),
                              const Divider(),
                              SwitchListTile(title: const Text('إدارة المشاريع'), value: member.canManageProjects, onChanged: isLeader ? null : (value) => _updatePermissions(member, canAddProj: value)),
                              SwitchListTile(title: const Text('إضافة أخطاء'), value: member.canAddBugs, onChanged: isLeader ? null : (value) => _updatePermissions(member, canAdd: value)),
                              SwitchListTile(title: const Text('تعديل الأخطاء'), value: member.canEditBugs, onChanged: isLeader ? null : (value) => _updatePermissions(member, canEdit: value)),
                              SwitchListTile(title: const Text('استخدام المحادثة'), value: member.canUseChat, onChanged: isLeader ? null : (value) => _updatePermissions(member, canChat: value)),
                              SwitchListTile(title: const Text('الفحص الذكي للكود'), value: member.canUseAiAudit, onChanged: isLeader ? null : (value) => _updatePermissions(member, canAudit: value)),
                              // --- إضافة: مفتاح التحكم بصلاحية الإشعارات العامة ---
                              SwitchListTile(
                                title: const Text('إرسال إشعارات عامة'),
                                value: member.canSendBroadcasts,
                                onChanged: isLeader ? null : (value) => _updatePermissions(member, canBroadcast: value),
                              ),
                            ],
                          ),
                        ),
                      );
                    }).toList(),
                    _buildDangerZoneCard(),
                  ],
                );
              },
            ),
    );
  }

  Widget _buildBroadcastCard() {
    return Card(
      margin: const EdgeInsets.all(16),
      color: Theme.of(context).primaryColor.withOpacity(0.2),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _broadcastFormKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              Text('إشعار لجميع الأعضاء', style: Theme.of(context).textTheme.titleLarge),
              const SizedBox(height: 8),
              const Text('أرسل رسالة فورية لجميع أعضاء الفريق. ستصل كإشعار على أجهزتهم.'),
              const SizedBox(height: 16),
              TextFormField(
                controller: _broadcastController, maxLength: 100,
                decoration: const InputDecoration(labelText: 'نص الرسالة', counterText: ''),
                validator: (value) => (value?.trim().isEmpty ?? true) ? 'الرسالة لا يمكن أن تكون فارغة' : null,
              ),
              const SizedBox(height: 16),
              ElevatedButton.icon(
                icon: _isSendingBroadcast ? const SizedBox(width: 20, height: 20, child: CircularProgressIndicator(strokeWidth: 2, color: Colors.white)) : const Icon(Icons.send_rounded),
                label: Text(_isSendingBroadcast ? 'جاري الإرسال...' : 'إرسال الإشعار'),
                onPressed: _isSendingBroadcast ? null : _sendBroadcast,
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildDangerZoneCard() {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Card(
        color: Colors.red.shade900.withOpacity(0.5),
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              Text('منطقة الخطر', style: Theme.of(context).textTheme.titleLarge),
              const SizedBox(height: 8),
              const Text('الإجراء التالي لا يمكن التراجع عنه.'),
              const SizedBox(height: 16),
              FilledButton.icon(
                icon: const Icon(Icons.delete_forever),
                label: const Text('حذف هذا الـ Hub نهائياً'),
                onPressed: _deleteHub,
                style: FilledButton.styleFrom(backgroundColor: Colors.red.shade700, foregroundColor: Colors.white),
              )
            ],
          ),
        ),
      ),
    );
  }
}
import 'dart:async';
import 'dart:io';
import 'package:http/http.dart';
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import '../models/project.dart';
import '../models/hub.dart';
import '../models/hub_member.dart';
import '../services/supabase_service.dart';
import '../screens/bug_tracker_view.dart';
import '../widgets/ai_assistant_panel.dart';
import '../widgets/project_sidebar.dart';
import '../widgets/add_edit_project_dialog.dart';
import '../widgets/app_dialogs.dart';
import 'hub_management_screen.dart';
import 'initial_hub_screen.dart';
import 'notification_settings_screen.dart';
import 'auth_dialog.dart';
import 'package:connectivity_plus/connectivity_plus.dart';

enum HubLoadState { loading, loaded, error }

final GlobalKey<_HomeScreenState> homeScreenKey = GlobalKey<_HomeScreenState>();

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  final SupabaseService _supabaseService = SupabaseService();
  Project? _selectedProject;
  Hub? _currentHub;
  HubMember? _myMembership;
  final GlobalKey<ScaffoldState> _scaffoldKey = GlobalKey<ScaffoldState>();
  final GlobalKey<ProjectSidebarState> _sidebarKey =
      GlobalKey<ProjectSidebarState>();
  final GlobalKey<BugTrackerViewState> _bugTrackerKey =
      GlobalKey<BugTrackerViewState>();

  HubLoadState _hubLoadState = HubLoadState.loading;
  StreamSubscription? _hubMembersSubscription;
  StreamSubscription? _hubSubscription;
  bool _isLeaving = false;
  bool _isAnonymousUser = true;

  bool get _isLeader => _myMembership?.role == 'leader';
  bool get _canSendBroadcast => _myMembership?.canSendBroadcasts ?? false;

  @override
  void initState() {
    super.initState();
    _supabaseService.auth.onAuthStateChange.listen((data) {
      if (mounted) {
        _checkUserStatus();
        _loadHubInfoWithRetry();
      }
    });
    _checkUserStatus();
    _loadHubInfoWithRetry();
  }

  void _checkUserStatus() {
    if (mounted) {
      setState(() {
        _isAnonymousUser = _supabaseService.isUserAnonymous();
      });
    }
  }

  void handleNotificationNavigation(String? type, String projectId) async {
    try {
      if (_hubLoadState != HubLoadState.loaded) {
        await _loadHubInfoWithRetry();
        if (_hubLoadState != HubLoadState.loaded) {
          debugPrint("Cannot navigate: Hub info not loaded.");
          return;
        }
      }

      final allProjects = await _supabaseService.getProjects();
      final targetProject = allProjects.firstWhere(
        (p) => p.id == projectId,
        orElse: () => throw Exception('Project not found from notification'),
      );

      if (mounted) {
        setState(() {
          _selectedProject = targetProject;
        });
      }

      if (type == 'chat') {
        _scaffoldKey.currentState?.openEndDrawer();
      }
    } catch (e) {
      debugPrint("Failed to navigate from notification: $e");
      if (mounted) {
        showErrorDialog(context,
            'لم يتم العثور على المشروع المرتبط بالإشعار.');
      }
    }
  }

  @override
  void dispose() {
    _hubMembersSubscription?.cancel();
    _hubSubscription?.cancel();
    super.dispose();
  }

  Future<void> _loadHubInfoWithRetry({int retries = 3}) async {
    if (!mounted) return;

    var connectivityResult = await (Connectivity().checkConnectivity());
    if (!connectivityResult.contains(ConnectivityResult.mobile) &&
        !connectivityResult.contains(ConnectivityResult.wifi) &&
        !connectivityResult.contains(ConnectivityResult.ethernet)) {
      _handleNetworkError();
      return;
    }

    setState(() => _hubLoadState = HubLoadState.loading);
    Object? lastError;

    for (int i = 0; i < retries; i++) {
      try {
        final hub = await _supabaseService.getHubForUser();
        if (hub != null && mounted) {
          final member = await _supabaseService.getMemberInfo(hub.id);
          if (member != null) {
            setState(() {
              _currentHub = hub;
              _myMembership = member;
              _hubLoadState = HubLoadState.loaded;
            });
            _setupRealtimeListeners(hub.id);
            return;
          }
        }
        break;
      } on SocketException catch (e) {
        lastError = e;
        debugPrint('Network error (SocketException): $e');
        break;
      } on ClientException catch (e) {
        lastError = e;
        debugPrint('Network error (ClientException): $e');
        break;
      } catch (e) {
        lastError = e;
        debugPrint('Error loading hub info (attempt ${i + 1}): $e');
      }
      if (i < retries - 1) await Future.delayed(const Duration(seconds: 2));
    }

    if (mounted && _hubLoadState != HubLoadState.loaded) {
      setState(() => _hubLoadState = HubLoadState.error);
      if (lastError is ClientException || lastError is SocketException) {
        _handleNetworkError();
      } else {
        _handleHubDeleted();
      }
    }
  }

  void _handleNetworkError() {
    if (!mounted) return;
    showNoInternetDialog(context, () {
      _loadHubInfoWithRetry();
    });
  }

  void _handleMemberKicked() => _cleanupAndNavigate(
      title: 'تم طردك',
      content:
          'لقد تم إزالتك من الفريق. يجب عليك الانضمام إلى فريق جديد أو إنشاء واحد.');
  void _handleHubDeleted() => _cleanupAndNavigate(
      title: 'الفريق لم يعد موجوداً',
      content:
          'يبدو أن الفريق الذي كنت فيه قد تم حذفه. يجب عليك الانضمام أو إنشاء فريق جديد.');

  Future<void> _signOut() async {
    final confirm = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('تسجيل الخروج'),
        content: const Text('هل أنت متأكد من رغبتك في تسجيل الخروج؟'),
        actions: [
          TextButton(
              onPressed: () => Navigator.pop(context, false),
              child: const Text('إلغاء')),
          TextButton(
              onPressed: () => Navigator.pop(context, true),
              child: const Text('خروج')),
        ],
      ),
    );

    if (confirm == true && mounted) {
      try {
        await _supabaseService.signOut();
        final prefs = await SharedPreferences.getInstance();
        await prefs.setBool('hub_setup_complete', false);
        Navigator.of(context).pushAndRemoveUntil(
          MaterialPageRoute(builder: (context) => const InitialHubScreen()),
          (route) => false,
        );
      } catch (e) {
        showErrorDialog(context, 'فشل تسجيل الخروج: $e');
      }
    }
  }

  void _cleanupAndNavigate({required String title, required String content}) async {
    if (!mounted) return;
    _hubMembersSubscription?.cancel();
    _hubSubscription?.cancel();
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool('hub_setup_complete', false);
    if (!mounted) return;
    final navigator = Navigator.of(context);
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        title: Text(title),
        content: Text(content),
        actions: [
          TextButton(
            onPressed: () {
              navigator.pushAndRemoveUntil(
                  MaterialPageRoute(
                      builder: (context) => const InitialHubScreen()),
                  (route) => false);
            },
            child: const Text('موافق'),
          )
        ],
      ),
    );
  }

  void _setupRealtimeListeners(String hubId) {
    _hubMembersSubscription?.cancel();
    _hubSubscription?.cancel();
    _hubMembersSubscription =
        _supabaseService.getHubMembersStream(hubId).listen((membersList) {
      if (!mounted || _isLeaving) return;
      final currentUserStillAMember = membersList
          .any((m) => m['user_id'] == _supabaseService.currentUserId);
      if (currentUserStillAMember) {
        final myData = membersList
            .firstWhere((m) => m['user_id'] == _supabaseService.currentUserId);
        if (mounted) setState(() => _myMembership = HubMember.fromJson(myData));
      } else {
        _handleMemberKicked();
      }
    });
    _hubSubscription = _supabaseService.getHubStream(hubId).listen((hub) {
      if (!mounted || _isLeaving) return;
      if (hub == null)
        _handleHubDeleted();
      else if (mounted) setState(() => _currentHub = hub);
    });
  }

  void _onProjectSelected(Project? project) =>
      setState(() => _selectedProject = project);

  void _editProject(Project project) {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => AddEditProjectDialog(
        project: project,
        onProjectSaved: (isNew) async {
          _sidebarKey.currentState?.refreshProjects();
          final projects = await _supabaseService.getProjects();
          if (mounted) {
            setState(() {
              _selectedProject = projects.firstWhere((p) => p.id == project.id,
                  orElse: () => project);
            });
          }
        },
      ),
    );
  }

  void _refreshAll() {
    _sidebarKey.currentState?.refreshProjects();
    _bugTrackerKey.currentState?.refreshBugs();
    showSuccessDialog(context, 'تم تحديث البيانات بنجاح!');
  }

  Future<void> _leaveHub() async {
    if (_myMembership == null) return;
    final confirm = await showDialog<bool>(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        title: const Text('تأكيد المغادرة'),
        content: const Text('هل أنت متأكد من رغبتك في مغادرة الفريق؟'),
        actions: [
          TextButton(
              onPressed: () => Navigator.pop(context, false),
              child: const Text('إلغاء')),
          TextButton(
              onPressed: () => Navigator.pop(context, true),
              child: const Text('مغادرة',
                  style: TextStyle(color: Colors.orange))),
        ],
      ),
    );

    if (confirm == true && mounted) {
      setState(() => _isLeaving = true);
      try {
        await _supabaseService.leaveHub(_myMembership!.id);
        if (mounted) {
          final prefs = await SharedPreferences.getInstance();
          await prefs.setBool('hub_setup_complete', false);
          Navigator.of(context).pushAndRemoveUntil(
              MaterialPageRoute(builder: (context) => const InitialHubScreen()),
              (route) => false);
        }
      } catch (e) {
        if (mounted) {
          showErrorDialog(context, 'فشل في مغادرة الفريق: ${e.toString()}');
          setState(() => _isLeaving = false);
        }
      }
    }
  }

  void _showMemberBroadcastDialog() {
    final broadcastController = TextEditingController();
    final broadcastFormKey = GlobalKey<FormState>();
    bool isSending = false;

    showDialog(
        context: context,
        builder: (context) => StatefulBuilder(
              builder: (context, setState) {
                return AlertDialog(
                  title: const Text('إرسال رسالة عامة للفريق'),
                  content: Form(
                    key: broadcastFormKey,
                    child: TextFormField(
                      controller: broadcastController,
                      decoration:
                          const InputDecoration(labelText: 'نص الرسالة'),
                      validator: (v) => v!.trim().isEmpty
                          ? 'الرسالة لا يمكن أن تكون فارغة'
                          : null,
                    ),
                  ),
                  actions: [
                    TextButton(
                        onPressed:
                            isSending ? null : () => Navigator.pop(context),
                        child: const Text('إلغاء')),
                    ElevatedButton(
                      onPressed: isSending
                          ? null
                          : () async {
                              if (broadcastFormKey.currentState!
                                  .validate()) {
                                setState(() => isSending = true);
                                try {
                                  await _supabaseService
                                      .sendBroadcastNotification(
                                          broadcastController.text.trim(),
                                          fromLeader: false);
                                  if (mounted) {
                                    Navigator.pop(context);
                                    showSuccessDialog(
                                        context, 'تم إرسال الإشعار بنجاح.');
                                  }
                                } catch (e) {
                                  if (mounted)
                                    showErrorDialog(
                                        context, 'فشل الإرسال: $e');
                                } finally {
                                  if (mounted)
                                    setState(() => isSending = false);
                                }
                              }
                            },
                      child: isSending
                          ? const SizedBox(
                              height: 20,
                              width: 20,
                              child: CircularProgressIndicator(strokeWidth: 2))
                          : const Text('إرسال'),
                    )
                  ],
                );
              },
            ));
  }

  void _showHubInfo() {
    if (_currentHub == null) return;
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        title: Text('معلومات الفريق: ${_currentHub!.name}'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text('الرمز السري لمشاركة الفريق:'),
            const SizedBox(height: 8),
            SelectableText(_currentHub!.secretCode,
                style:
                    const TextStyle(fontWeight: FontWeight.bold, fontSize: 16)),
          ],
        ),
        actions: [
          if (!_isLeader)
            TextButton.icon(
                icon: const Icon(Icons.exit_to_app, color: Colors.orange),
                label: const Text('مغادرة الفريق',
                    style: TextStyle(color: Colors.orange)),
                onPressed: () {
                  Navigator.pop(context);
                  _leaveHub();
                }),
          if (_isLeader)
            TextButton.icon(
                icon: const Icon(Icons.admin_panel_settings_outlined),
                label: const Text('إدارة الأعضاء'),
                onPressed: () {
                  Navigator.pop(context);
                  Navigator.push(
                      context,
                      MaterialPageRoute(
                          builder: (context) =>
                              HubManagementScreen(hub: _currentHub!)));
                }),
          TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text('إغلاق'))
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    if (_hubLoadState == HubLoadState.loading) {
      return const Scaffold(
        body: Center(
            child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
              CircularProgressIndicator(),
              SizedBox(height: 16),
              Text('جاري تحميل بيانات الفريق...')
            ])),
      );
    }
    if (_hubLoadState == HubLoadState.error) {
      return Scaffold(body: Container());
    }

    return Scaffold(
      key: _scaffoldKey,
      appBar: AppBar(
        // --- تعديل: استخدام Expanded لضمان ظهور العنوان ---
        title: Row(
          children: [
            Expanded(
              child: Text(
                _selectedProject?.name ?? _currentHub?.name ?? 'DevNest',
                overflow: TextOverflow.ellipsis,
              ),
            ),
          ],
        ),
        actions: [
          // --- تعديل: إبقاء الأزرار الأساسية فقط ---
          if (_selectedProject != null)
            IconButton(
              icon: const Icon(Icons.refresh),
              onPressed: _refreshAll,
              tooltip: 'تحديث الكل',
            ),
          IconButton(
            icon: const Icon(Icons.auto_awesome),
            onPressed: () => _scaffoldKey.currentState?.openEndDrawer(),
            tooltip: 'فتح المساعد الذكي',
          ),
          // --- تعديل: نقل بقية الأزرار إلى قائمة منسدلة ---
          if (_currentHub != null)
            PopupMenuButton<String>(
              onSelected: (value) {
                if (value == 'hub_info') _showHubInfo();
                if (value == 'broadcast') _showMemberBroadcastDialog();
                if (value == 'settings') {
                  Navigator.push(
                      context,
                      MaterialPageRoute(
                          builder: (_) => const NotificationSettingsScreen()));
                } else if (value == 'logout') {
                  _signOut();
                }
              },
              itemBuilder: (BuildContext context) => <PopupMenuEntry<String>>[
                const PopupMenuItem<String>(
                  value: 'hub_info',
                  child: ListTile(
                    leading: Icon(Icons.hub_outlined),
                    title: Text('معلومات الفريق'),
                  ),
                ),
                if (!_isLeader && _canSendBroadcast)
                  const PopupMenuItem<String>(
                    value: 'broadcast',
                    child: ListTile(
                      leading: Icon(Icons.campaign_outlined),
                      title: Text('إرسال إشعار عام'),
                    ),
                  ),
                const PopupMenuItem<String>(
                  value: 'settings',
                  child: ListTile(
                    leading: Icon(Icons.notifications_active_outlined),
                    title: Text('إعدادات الإشعارات'),
                  ),
                ),
                const PopupMenuDivider(),
                const PopupMenuItem<String>(
                  value: 'logout',
                  child: ListTile(
                    leading: Icon(Icons.logout),
                    title: Text('تسجيل الخروج'),
                  ),
                ),
              ],
            ),
        ],
      ),
      drawer: ProjectSidebar(
        key: _sidebarKey,
        onProjectSelected: _onProjectSelected,
        selectedProject: _selectedProject,
        myMembership: _myMembership,
      ),
      endDrawer: AiAssistantPanel(
        projectContext: _selectedProject,
        myMembership: _myMembership,
      ),
      body: Column(
        children: [
          if (_isAnonymousUser)
            Material(
              color: Colors.amber.shade900,
              child: InkWell(
                onTap: () async {
                  await showDialog(
                      context: context, builder: (_) => const AuthDialog());
                },
                child: Container(
                  padding:
                      const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                  child: const Row(
                    children: [
                      Icon(Icons.warning_amber_rounded, color: Colors.white),
                      SizedBox(width: 12),
                      Expanded(
                        child: Text(
                          'أنت تستخدم حساب زائر. بياناتك قد تُفقد. اضغط هنا لإنشاء حساب وتأمين عملك.',
                          style: TextStyle(
                              color: Colors.white,
                              fontWeight: FontWeight.bold),
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ),
          Expanded(
            child: _selectedProject == null
                ? Center(
                    child: Padding(
                      padding: const EdgeInsets.all(32.0),
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Icon(Icons.rule_folder_outlined,
                              size: 100, color: Colors.grey[700]),
                          const SizedBox(height: 24),
                          Text(
                              'الرجاء اختيار مشروع من القائمة للبدء',
                              style: Theme.of(context).textTheme.titleMedium,
                              textAlign: TextAlign.center),
                          const SizedBox(height: 8),
                          Text('أو قم بإنشاء مشروع جديد',
                              style: Theme.of(context).textTheme.bodySmall,
                              textAlign: TextAlign.center),
                        ],
                      ),
                    ),
                  )
                : BugTrackerView(
                    key: _bugTrackerKey,
                    project: _selectedProject!,
                    onEditProject: () => _editProject(_selectedProject!),
                    myMembership: _myMembership,
                  ),
          ),
        ],
      ),
    );
  }
}

import 'package:collection/collection.dart';
import 'package:flutter/material.dart';
import 'package:path_provider/path_provider.dart';
import 'package:dio/dio.dart';
import 'package:open_filex/open_filex.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:flutter_speed_dial/flutter_speed_dial.dart';
import 'dart:io';
import '../models/bug.dart';
import '../models/project.dart';
import '../models/hub_member.dart';
import '../services/supabase_service.dart';
import '../services/github_service.dart';
import '../widgets/bug_card.dart';
import '../add_bug_dialog.dart';
import '../ai_audit_dialog.dart';
import '../widgets/app_dialogs.dart';

class BugTrackerView extends StatefulWidget {
  final Project project;
  final VoidCallback onEditProject;
  final HubMember? myMembership;

  const BugTrackerView({
    super.key,
    required this.project,
    required this.onEditProject,
    required this.myMembership,
  });

  @override
  State<BugTrackerView> createState() => BugTrackerViewState();
}

class BugTrackerViewState extends State<BugTrackerView> {
  final SupabaseService _supabaseService = SupabaseService();
  final GitHubService _githubService = GitHubService();
  late Future<List<Bug>> _bugsFuture;

  @override
  void initState() {
    super.initState();
    refreshBugs();
  }

  void refreshBugs() {
    if (mounted) {
      setState(() {
        _bugsFuture = _supabaseService.getBugsForProject(widget.project.id);
      });
    }
  }

  @override
  void didUpdateWidget(covariant BugTrackerView oldWidget) {
    super.didUpdateWidget(oldWidget);
    if (widget.project.id != oldWidget.project.id) {
      refreshBugs();
    }
  }

  void _showAiAudit() {
    final canAudit = widget.myMembership?.canUseAiAudit ?? false;
    if (!canAudit) {
      showPermissionDeniedDialog(context);
      return;
    }
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => AiAuditDialog(project: widget.project, onBugsAdded: refreshBugs),
    );
  }

  Future<void> _downloadAndInstallFromGitHub() async {
    if (widget.project.githubUrl == null || widget.project.githubUrl!.isEmpty) {
      showErrorDialog(context, 'لم يتم ربط المشروع بمستودع GitHub.');
      return;
    }
    final status = await Permission.requestInstallPackages.request();
    if (status.isPermanentlyDenied) {
      if (mounted) {
        showDialog(
          context: context,
          barrierDismissible: false,
          builder: (context) => AlertDialog(
            title: const Text('الإذن مطلوب'),
            content: const Text('تم رفض إذن تثبيت التطبيقات بشكل دائم. الرجاء تفعيله يدوياً من إعدادات التطبيق للمتابعة.'),
            actions: [
              TextButton(onPressed: () => Navigator.pop(context), child: const Text('إلغاء')),
              TextButton(onPressed: () { openAppSettings(); Navigator.pop(context); }, child: const Text('فتح الإعدادات')),
            ],
          ),
        );
      }
      return;
    }
    if (!status.isGranted) {
      if (mounted) showErrorDialog(context, 'يجب الموافقة على إذن تثبيت التطبيقات لإكمال العملية.');
      return;
    }

    final downloadNotifier = ValueNotifier<double?>(null);
    final statusNotifier = ValueNotifier<String>('جاري جلب معلومات الإصدار...');
    final releaseInfoNotifier = ValueNotifier<Map<String, String>>({});
    final cancelToken = CancelToken();
    showDialog(
      context: context, barrierDismissible: false,
      builder: (context) => AlertDialog(
        title: const Text('تنزيل آخر إصدار'),
        content: AnimatedBuilder(
          animation: Listenable.merge([downloadNotifier, statusNotifier, releaseInfoNotifier]),
          builder: (context, child) {
            final progress = downloadNotifier.value;
            final statusText = statusNotifier.value;
            final releaseInfo = releaseInfoNotifier.value;
            return Column(
              mainAxisSize: MainAxisSize.min, crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                if (releaseInfo['releaseTag'] != null) Chip(label: Text(releaseInfo['releaseTag']!, style: const TextStyle(fontWeight: FontWeight.bold))),
                const SizedBox(height: 8), Text(statusText), const SizedBox(height: 16),
                LinearProgressIndicator(value: progress),
                if (progress != null && progress > 0) Center(child: Text('${(progress * 100).toStringAsFixed(0)}%')),
                if (releaseInfo['releaseBody'] != null && releaseInfo['releaseBody']!.isNotEmpty) ...[
                  const Divider(height: 24), const Text('ملاحظات الإصدار:', style: TextStyle(fontWeight: FontWeight.bold)), const SizedBox(height: 4),
                  ConstrainedBox(
                    constraints: BoxConstraints(maxHeight: MediaQuery.of(context).size.height * 0.2),
                    child: SingleChildScrollView(child: Text(releaseInfo['releaseBody']!)),
                  ),
                ]
              ],
            );
          },
        ),
        actions: [TextButton(onPressed: () { cancelToken.cancel('Download cancelled by user.'); Navigator.of(context).pop(); }, child: const Text('إلغاء'))],
      ),
    );

    String? savePath;
    try {
      final info = await _githubService.getLatestReleaseAssetInfo(widget.project.githubUrl!);
      final downloadUrl = info['downloadUrl']!;
      final fileName = info['fileName']!;
      releaseInfoNotifier.value = info;
      statusNotifier.value = 'جاري تنزيل: $fileName';
      downloadNotifier.value = 0.0;
      final dir = await getApplicationDocumentsDirectory();
      savePath = '${dir.path}/$fileName';
      await Dio().download(downloadUrl, savePath, onReceiveProgress: (received, total) {
        if (total != -1) downloadNotifier.value = received / total;
      }, cancelToken: cancelToken);
      if (mounted) Navigator.of(context).pop();
      if (savePath != null) await OpenFilex.open(savePath);
    } on DioException catch (e) {
      if (e.type == DioExceptionType.cancel) {
        debugPrint("Download cancelled by user.");
        if (savePath != null) {
          final partialFile = File(savePath);
          if (await partialFile.exists()) await partialFile.delete();
        }
      } else {
        if (mounted) { Navigator.of(context).pop(); showErrorDialog(context, 'فشل تحميل التطبيق: ${e.message}'); }
      }
    } catch (e) {
      if (mounted) { Navigator.of(context).pop(); showErrorDialog(context, 'فشل تحميل التطبيق: ${e.toString().replaceFirst("Exception: ", "")}'); }
    }
  }

  @override
  Widget build(BuildContext context) {
    final bool canAddBugs = widget.myMembership?.canAddBugs ?? false;
    final bool canManageProjects = widget.myMembership?.canManageProjects ?? false;
    final bool canUseAiAudit = widget.myMembership?.canUseAiAudit ?? false;
    final bool hasGithubUrl = widget.project.githubUrl != null && widget.project.githubUrl!.isNotEmpty;

    return Scaffold(
      body: Column(
        children: [
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [Text(widget.project.description ?? 'لا يوجد وصف لهذا المشروع.', style: Theme.of(context).textTheme.bodyMedium)],
            ),
          ),
          const Divider(height: 1),
          Expanded(
            child: FutureBuilder<List<Bug>>(
              future: _bugsFuture,
              builder: (context, snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting) return const Center(child: CircularProgressIndicator());
                if (snapshot.hasError) return Center(child: Text('حدث خطأ: ${snapshot.error}'));
                if (!snapshot.hasData || snapshot.data!.isEmpty) return const Center(child: Padding(padding: EdgeInsets.all(16.0), child: Text('لا توجد أخطاء في هذا المشروع حاليًا. عظيم!', textAlign: TextAlign.center)));
                
                final allBugs = snapshot.data!;
                final inProgressBugs = allBugs.where((b) => b.status == 'جاري').toList();
                final resolvedBugs = allBugs.where((b) => b.status == 'تم الحل').toList();
                final groupedInProgress = groupBy<Bug, String>(inProgressBugs, (bug) => bug.type);
                final criticalBugs = groupedInProgress['حرج'] ?? [];
                final simpleBugs = groupedInProgress['بسيط'] ?? [];
                final enhancementBugs = groupedInProgress['تحسين'] ?? [];

                return _buildBugList(
                  critical: criticalBugs,
                  simple: simpleBugs,
                  enhancements: enhancementBugs,
                  resolved: resolvedBugs,
                );
              },
            ),
          ),
        ],
      ),
      floatingActionButton: SpeedDial(
        icon: Icons.add, activeIcon: Icons.close,
        backgroundColor: Theme.of(context).primaryColor, foregroundColor: Colors.white,
        children: [
          if (canUseAiAudit) SpeedDialChild(child: const Icon(Icons.auto_fix_high), label: 'فحص ذكي للكود', backgroundColor: Colors.deepPurple, onTap: _showAiAudit),
          if (canAddBugs) SpeedDialChild(child: const Icon(Icons.bug_report), label: 'إضافة خطأ/تحسين يدوي', onTap: () => showDialog(context: context, barrierDismissible: false, builder: (context) => AddBugDialog(projectId: widget.project.id, onBugAdded: refreshBugs))),
          if (canManageProjects) SpeedDialChild(child: const Icon(Icons.edit), label: 'تعديل تفاصيل المشروع', onTap: widget.onEditProject),
          if (hasGithubUrl) SpeedDialChild(child: const Icon(Icons.download_for_offline), label: 'تنزيل آخر إصدار من GitHub', backgroundColor: Colors.teal, onTap: _downloadAndInstallFromGitHub),
        ],
      ),
      floatingActionButtonLocation: FloatingActionButtonLocation.startFloat,
    );
  }

  Widget _buildBugList({
    required List<Bug> critical,
    required List<Bug> simple,
    required List<Bug> enhancements,
    required List<Bug> resolved,
  }) {
    if (critical.isEmpty && simple.isEmpty && enhancements.isEmpty && resolved.isEmpty) {
      return const Center(child: Text('لا توجد عناصر هنا'));
    }
    
    // --- تعديل: منطق الترتيب الجديد ---
    // 1. ترتيب حسب الأولوية الشخصية (الأقل هو الأعلى)
    // 2. ثم ترتيب حسب تاريخ الإنشاء (الأحدث أولاً)
    final comparator = (Bug a, Bug b) {
      final priorityComparison = a.priorityOrder.compareTo(b.priorityOrder);
      if (priorityComparison != 0) return priorityComparison;
      return b.createdAt.compareTo(a.createdAt);
    };

    critical.sort(comparator);
    simple.sort(comparator);
    enhancements.sort(comparator);
    resolved.sort((a, b) => b.createdAt.compareTo(a.createdAt)); // المحلولة لا تحتاج لأولوية

    return ListView(
      padding: const EdgeInsets.all(16.0),
      children: [
        if (critical.isNotEmpty) _buildExpansionTile('أخطاء حرجة (${critical.length})', critical, Icons.error, Colors.red.shade300),
        if (simple.isNotEmpty) _buildExpansionTile('أخطاء بسيطة (${simple.length})', simple, Icons.bug_report, Colors.orange.shade300),
        if (enhancements.isNotEmpty) _buildExpansionTile('تحسينات (${enhancements.length})', enhancements, Icons.auto_awesome, Colors.blue.shade300),
        if (resolved.isNotEmpty) _buildExpansionTile('تم الحل (${resolved.length})', resolved, Icons.check_circle, Colors.green.shade300, initiallyExpanded: false),
      ],
    );
  }

  Widget _buildExpansionTile(String title, List<Bug> bugs, IconData icon, Color color, {bool initiallyExpanded = true}) {
    return Card(
      margin: const EdgeInsets.only(bottom: 16),
      clipBehavior: Clip.antiAlias,
      child: ExpansionTile(
        key: PageStorageKey(title),
        initiallyExpanded: initiallyExpanded,
        leading: Icon(icon, color: color),
        title: Text(title, style: TextStyle(fontWeight: FontWeight.bold, color: color)),
        children: bugs.map((bug) => Padding(
              padding: const EdgeInsets.symmetric(horizontal: 8.0),
              child: BugCard(
                project: widget.project,
                bug: bug,
                onStatusChanged: refreshBugs,
                onDeleted: refreshBugs,
                myMembership: widget.myMembership,
              ),
            )).toList(),
      ),
    );
  }
}
import 'package:flutter/material.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import '../widgets/app_dialogs.dart';
import '../../services/supabase_service.dart';

// --- إضافة: تعداد لتحديد وضع المصادقة ---
enum AuthMode { login, signUp }

class AuthDialog extends StatefulWidget {
  const AuthDialog({super.key});

  @override
  State<AuthDialog> createState() => _AuthDialogState();
}

class _AuthDialogState extends State<AuthDialog> {
  final _supabaseService = SupabaseService();
  // --- تعديل: استخدام التعداد لإدارة الحالة ---
  AuthMode _authMode = AuthMode.signUp;
  bool _isLoading = false;
  final _formKey = GlobalKey<FormState>();

  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();
  final _confirmPasswordController = TextEditingController();

  @override
  void dispose() {
    _emailController.dispose();
    _passwordController.dispose();
    _confirmPasswordController.dispose();
    super.dispose();
  }

  Future<void> _performAuth() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() => _isLoading = true);
    try {
      if (_authMode == AuthMode.login) {
        // --- تعديل: منطق تسجيل الدخول ---
        final isAnonymous = _supabaseService.isUserAnonymous();
        if (isAnonymous) {
          final confirm = await showDialog<bool>(
            context: context,
            barrierDismissible: false,
            builder: (context) => AlertDialog(
              title: const Text('تنبيه'),
              content: const Text('تسجيل الدخول سيؤدي إلى فقدان بياناتك كزائر. هل ترغب في المتابعة؟'),
              actions: [
                TextButton(onPressed: () => Navigator.pop(context, false), child: const Text('إلغاء')),
                TextButton(onPressed: () => Navigator.pop(context, true), child: const Text('متابعة')),
              ],
            )
          );
          if (confirm != true) return;
        }

        await _supabaseService.auth.signInWithPassword(
          email: _emailController.text.trim(),
          password: _passwordController.text.trim(),
        );

      } else { // AuthMode.signUp
        // ربط الحساب المجهول الحالي ببيانات اعتماد جديدة
        await _supabaseService.linkAnonymousUser(
          email: _emailController.text.trim(),
          password: _passwordController.text.trim(),
        );
        if (mounted) {
          showSuccessDialog(context, 'تم إنشاء حسابك وتأمينه بنجاح!');
        }
      }

      if (mounted) {
        Navigator.of(context).pop(true);
      }

    } on AuthException catch (e) {
      if (mounted) {
        showErrorDialog(context, 'فشل المصادقة: ${e.message}');
      }
    } catch (e) {
      if (mounted) {
        showErrorDialog(context, 'حدث خطأ غير متوقع: $e');
      }
    } finally {
      if (mounted) {
        setState(() => _isLoading = false);
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      // --- تعديل: تصميم جديد للنافذة ---
      title: const Text('تأمين حسابك'),
      content: Form(
        key: _formKey,
        child: SingleChildScrollView(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              Text(
                _authMode == AuthMode.signUp 
                ? 'قم بإنشاء حساب جديد لربط بياناتك الحالية وتأمينها.'
                : 'سجل الدخول إلى حسابك الحالي (سيتم فقدان بيانات الزائر).',
                textAlign: TextAlign.center,
                style: Theme.of(context).textTheme.bodySmall,
              ),
              const SizedBox(height: 16),
              SegmentedButton<AuthMode>(
                segments: const [
                  ButtonSegment(value: AuthMode.signUp, label: Text('إنشاء حساب')),
                  ButtonSegment(value: AuthMode.login, label: Text('تسجيل دخول')),
                ],
                selected: {_authMode},
                onSelectionChanged: (newSelection) {
                  setState(() => _authMode = newSelection.first);
                },
              ),
              const SizedBox(height: 16),
              TextFormField(
                controller: _emailController,
                decoration: const InputDecoration(labelText: 'البريد الإلكتروني'),
                keyboardType: TextInputType.emailAddress,
                validator: (value) {
                  if (value == null || value.trim().isEmpty || !value.contains('@')) {
                    return 'الرجاء إدخال بريد إلكتروني صالح';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 16),
              TextFormField(
                controller: _passwordController,
                decoration: const InputDecoration(labelText: 'كلمة المرور'),
                obscureText: true,
                validator: (value) {
                  if (value == null || value.length < 6) {
                    return 'كلمة المرور يجب أن تكون 6 أحرف على الأقل';
                  }
                  return null;
                },
              ),
              if (_authMode == AuthMode.signUp) ...[
                const SizedBox(height: 16),
                TextFormField(
                  controller: _confirmPasswordController,
                  decoration: const InputDecoration(labelText: 'تأكيد كلمة المرور'),
                  obscureText: true,
                  validator: (value) {
                    if (value != _passwordController.text) {
                      return 'كلمتا المرور غير متطابقتين';
                    }
                    return null;
                  },
                ),
              ],
            ],
          ),
        ),
      ),
      actions: [
        TextButton(
          onPressed: _isLoading ? null : () => Navigator.of(context).pop(false),
          child: const Text('إلغاء'),
        ),
        ElevatedButton(
          onPressed: _isLoading ? null : _performAuth,
          child: _isLoading
              ? const SizedBox(width: 20, height: 20, child: CircularProgressIndicator(strokeWidth: 2))
              : Text(_authMode == AuthMode.login ? 'دخول' : 'إنشاء وتأمين'),
        ),
      ],
    );
  }
}
class Project {
  final String id;
  String name;
  String? description;
  final String? hubId;
  String? githubUrl;

  Project({
    required this.id,
    required this.name,
    this.description,
    this.hubId,
    this.githubUrl,
  });

  factory Project.fromJson(Map<String, dynamic> json) {
    return Project(
      id: json['id'],
      name: json['name'],
      description: json['description'],
      hubId: json['hub_id'],
      githubUrl: json['github_url'],
    );
  }
  
  Map<String, dynamic> toJsonForUpdate() {
    return {
      'name': name,
      'description': description,
      'github_url': githubUrl,
    };
  }
}
class Hub {
  final String id;
  final String name;
  final String secretCode;
  final String leaderUserId;

  Hub({
    required this.id,
    required this.name,
    required this.secretCode,
    required this.leaderUserId,
  });

  factory Hub.fromJson(Map<String, dynamic> json) {
    return Hub(
      id: json['id'],
      name: json['name'],
      secretCode: json['secret_code'],
      leaderUserId: json['leader_user_id'],
    );
  }
}
class HubMember {
  final int id;
  final String hubId;
  final String userId;
  final String role;
  String? displayName;
  final bool canAddBugs;
  final bool canEditBugs;
  final bool canUseChat;
  final bool canManageProjects;
  final bool canUseAiAudit;
  // --- إضافة: صلاحية جديدة لإرسال إشعارات عامة ---
  final bool canSendBroadcasts;

  HubMember({
    required this.id,
    required this.hubId,
    required this.userId,
    required this.role,
    this.displayName,
    required this.canAddBugs,
    required this.canEditBugs,
    required this.canUseChat,
    required this.canManageProjects,
    required this.canUseAiAudit,
    required this.canSendBroadcasts, // إضافة للمُنشئ
  });

  factory HubMember.fromJson(Map<String, dynamic> json) {
    return HubMember(
      id: json['id'],
      hubId: json['hub_id'],
      userId: json['user_id'],
      role: json['role'],
      displayName: json['display_name'],
      canAddBugs: json['can_add_bugs'] ?? false,
      canEditBugs: json['can_edit_bugs'] ?? false,
      canUseChat: json['can_use_chat'] ?? false,
      canManageProjects: json['can_manage_projects'] ?? false,
      canUseAiAudit: json['can_use_ai_audit'] ?? false,
      // --- إضافة: قراءة الصلاحية الجديدة من قاعدة البيانات ---
      canSendBroadcasts: json['can_send_broadcasts'] ?? false,
    );
  }
}
class Bug {
  final String id;
  final String title;
  final String description;
  final String type; // Critical, Minor, Enhancement
  final String status; // Open, In Progress, Resolved
  final String projectId;
  final DateTime createdAt;
  final String? source;
  // --- إضافة: حقل لتخزين أولوية المستخدم الشخصية ---
  int? userPriority;

  Bug({
    required this.id,
    required this.title,
    required this.description,
    required this.type,
    required this.status,
    required this.projectId,
    required this.createdAt,
    this.source,
    this.userPriority, // تعيينه في المُنشئ
  });

  factory Bug.fromJson(Map<String, dynamic> json) {
    return Bug(
      id: json['id'],
      title: json['title'],
      description: json['description'] ?? '',
      type: json['type'],
      status: json['status'],
      projectId: json['project_id'],
      createdAt: DateTime.parse(json['created_at']),
      source: json['source'],
      // --- إضافة: قراءة الأولوية من البيانات الإضافية عند جلبها ---
      userPriority: json['user_priority'],
    );
  }

  Bug copyWith({String? status, int? userPriority}) {
    return Bug(
      id: id,
      title: title,
      description: description,
      type: type,
      status: status ?? this.status,
      projectId: projectId,
      createdAt: createdAt,
      source: source,
      userPriority: userPriority ?? this.userPriority,
    );
  }

  // --- إضافة: دالة مساعدة للترتيب. الأرقام الأقل هي الأعلى أولوية. ---
  // العناصر بدون أولوية (null) تأتي في النهاية.
  int get priorityOrder => userPriority ?? 999;
}
class AiChatMessage {
  final String id;
  final String projectId;
  final String userId;
  final String role; // 'user' or 'model'
  final String content;
  final DateTime createdAt;

  AiChatMessage({
    required this.id,
    required this.projectId,
    required this.userId,
    required this.role,
    required this.content,
    required this.createdAt,
  });

  factory AiChatMessage.fromJson(Map<String, dynamic> json) {
    return AiChatMessage(
      id: json['id'] as String,
      projectId: json['project_id'] as String,
      userId: json['user_id'] as String,
      role: json['role'] as String,
      content: json['content'] as String,
      createdAt: DateTime.parse(json['created_at'] as String),
    );
  }
}




/// <reference types="https://deno.land/x/deno/runtime/mod.ts" />
import { serve } from 'https://deno.land/std@0.168.0/http/server.ts';
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.44.2';
// --- تعديل: تم تحديث رابط المكتبة إلى إصدار أحدث وأكثر استقراراً ---
import { create, getNumericDate } from "https://deno.land/x/djwt@v2.9.1/mod.ts";
async function getAccessToken(serviceAccountJson) {
  const serviceAccount = JSON.parse(serviceAccountJson);
  const pem = serviceAccount.private_key;
  const pemHeader = "-----BEGIN PRIVATE KEY-----";
  const pemFooter = "-----END PRIVATE KEY-----";
  const pemContents = pem.replace(pemHeader, "").replace(pemFooter, "").replace(/\s/g, "");
  const binaryDerString = atob(pemContents);
  const keyBuffer = new Uint8Array(binaryDerString.length).map((_, i)=>binaryDerString.charCodeAt(i));
  const privateKey = await crypto.subtle.importKey("pkcs8", keyBuffer.buffer, {
    name: "RSASSA-PKCS1-v1_5",
    hash: "SHA-256"
  }, true, [
    "sign"
  ]);
  const jwt = await create({
    alg: 'RS256',
    typ: 'JWT'
  }, {
    iss: serviceAccount.client_email,
    scope: 'https://www.googleapis.com/auth/firebase.messaging',
    aud: 'https://oauth2.googleapis.com/token',
    // --- إضافة: تحديد وقت إصدار التوكن (iat) لحل المشكلة ---
    iat: getNumericDate(0),
    exp: getNumericDate(60 * 60)
  }, privateKey);
  const response = await fetch('https://oauth2.googleapis.com/token', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded'
    },
    body: `grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Ajwt-bearer&assertion=${jwt}`
  });
  const data = await response.json();
  if (!response.ok) {
    throw new Error(`Failed to get access token: ${data.error_description || JSON.stringify(data)}`);
  }
  return data.access_token;
}
async function sendFcmNotification(tokens, title, body, data = {}) {
  if (!tokens || tokens.length === 0) {
    console.warn('[DEBUG] No tokens to send notification.');
    return;
  }
  const projectId = Deno.env.get('FCM_PROJECT_ID');
  const serviceAccountJson = Deno.env.get('FCM_SERVICE_ACCOUNT_JSON');
  if (!projectId || !serviceAccountJson) {
    console.error('[DEBUG] FCM secrets not set.');
    return;
  }
  try {
    const accessToken = await getAccessToken(serviceAccountJson);
    const fcmUrl = `https://fcm.googleapis.com/v1/projects/${projectId}/messages:send`;
    const headers = {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${accessToken}`
    };
    const stringifiedData = Object.fromEntries(Object.entries(data).map(([key, value])=>[
        key,
        String(value)
      ]));
    const promises = tokens.map((token)=>{
      const payload = {
        message: {
          token,
          notification: {
            title,
            body
          },
          data: {
            ...stringifiedData,
            click_action: 'FLUTTER_NOTIFICATION_CLICK'
          }
        }
      };
      return fetch(fcmUrl, {
        method: 'POST',
        headers,
        body: JSON.stringify(payload)
      }).then(async (r)=>{
        if (!r.ok) {
          const errorBody = await r.text();
          console.error(`[DEBUG] FCM request failed for token ${token} status ${r.status}:`, errorBody);
        } else {
          console.log(`[DEBUG] FCM request succeeded for token ${token}`);
        }
      }).catch((e)=>{
        console.error(`[DEBUG] Error sending FCM notification to token ${token}:`, e);
      });
    });
    await Promise.all(promises);
  } catch (e) {
    console.error('[DEBUG] General error sending FCM notifications:', e);
  }
}
serve(async (req)=>{
  const supabaseClient = createClient(Deno.env.get('SUPABASE_URL') ?? '', Deno.env.get('SUPABASE_ANON_KEY') ?? '', {
    global: {
      headers: {
        Authorization: req.headers.get('Authorization') ?? ''
      }
    }
  });
  const supabaseAdmin = createClient(Deno.env.get('SUPABASE_URL') ?? '', Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? '');
  const { function_name, params } = await req.json();
  const { data: { user } } = await supabaseClient.auth.getUser();
  if (!user) return new Response('Unauthorized', {
    status: 401
  });
  let senderName;
  let hubId;
  const userIdToExclude = user.id;
  if (function_name === 'notify_broadcast_from_member') {
    const { data: sender, error: senderError } = await supabaseAdmin.from('hub_members').select('display_name, hub_id, can_send_broadcasts').eq('user_id', user.id).single();
    if (senderError || !sender) return new Response('Sender not found', {
      status: 400
    });
    if (!sender.can_send_broadcasts) return new Response('Permission denied to send broadcasts', {
      status: 403
    });
    senderName = sender.display_name ?? 'عضو بالفريق';
    hubId = sender.hub_id;
  } else if (function_name === 'notify_member_left') {
    senderName = params.sender_name ?? 'عضو سابق';
    hubId = params.hub_id;
  } else if (function_name === 'notify_permissions_update') {
    const { data: targetMember } = await supabaseAdmin.from('hub_members').select('user_id, hubs(name)').eq('id', params.member_id).single();
    if (!targetMember) return new Response('Target member not found', {
      status: 400
    });
    const { data: devices } = await supabaseAdmin.from('user_devices').select('device_token').eq('user_id', targetMember.user_id);
    const tokens = devices?.map((d)=>d.device_token).filter((t)=>t);
    await sendFcmNotification(tokens, 'تحديث الصلاحيات', `تم تحديث صلاحياتك في فريق "${targetMember.hubs.name}".`);
    return new Response(JSON.stringify({
      success: true
    }), {
      headers: {
        'Content-Type': 'application/json'
      }
    });
  } else {
    const { data: senderMember, error: senderError } = await supabaseAdmin.from('hub_members').select('display_name, hub_id').eq('user_id', user.id).single();
    if (senderError || !senderMember) return new Response('Sender not found in any hub', {
      status: 400
    });
    senderName = senderMember.display_name ?? 'Someone';
    hubId = senderMember.hub_id;
  }
  if (!hubId) return new Response('Hub ID could not be determined', {
    status: 400
  });
  let title = '';
  let body = '';
  let notificationData = {};
  let notificationType = '';
  let projectIdForFiltering;
  const RLM = '\u200F';
  switch(function_name){
    case 'notify_new_project':
      {
        const { data: project } = await supabaseAdmin.from('projects').select('name').eq('id', params.project_id).single();
        title = `${RLM}مشروع جديد: ${project?.name}`;
        body = `${RLM}تمت إضافة مشروع جديد بعنوان "${project?.name}" بواسطة ${senderName}.`;
        notificationType = 'project_all';
        projectIdForFiltering = params.project_id;
        notificationData = {
          type: 'project',
          project_id: params.project_id
        };
        break;
      }
    case 'notify_project_update':
      {
        const { data: project } = await supabaseAdmin.from('projects').select('name').eq('id', params.project_id).single();
        title = `${RLM}تحديث في مشروع: ${project?.name}`;
        body = `${RLM}قام ${senderName} بتعديل تفاصيل مشروع "${project?.name}".`;
        notificationType = 'project_all';
        projectIdForFiltering = params.project_id;
        notificationData = {
          type: 'project',
          project_id: params.project_id
        };
        break;
      }
    case 'notify_new_bug':
      {
        const { data: bug } = await supabaseAdmin.from('bugs').select('title, project_id, type, source').eq('id', params.bug_id).single();
        const { data: project } = await supabaseAdmin.from('projects').select('name').eq('id', bug?.project_id).single();
        const sourceText = bug?.source === 'ai' ? 'عبر اقتراح AI' : 'يدويًا';
        title = `${RLM}عنصر جديد في مشروع "${project?.name}"`;
        body = `${RLM}أضاف ${senderName} (${sourceText}): "${bug?.title}" (النوع: ${bug?.type}).`;
        notificationType = 'project_all';
        projectIdForFiltering = bug?.project_id;
        notificationData = {
          type: 'bug',
          project_id: bug?.project_id,
          bug_id: params.bug_id
        };
        break;
      }
    case 'notify_bug_update':
      {
        const { data: bug } = await supabaseAdmin.from('bugs').select('title, project_id, status').eq('id', params.bug_id).single();
        const { data: project } = await supabaseAdmin.from('projects').select('name').eq('id', bug?.project_id).single();
        title = `${RLM}تحديث في مشروع "${project?.name}"`;
        body = `${RLM}قام ${senderName} بتحديث حالة "${bug?.title}" إلى "${bug?.status}".`;
        notificationType = 'project_all';
        projectIdForFiltering = bug?.project_id;
        notificationData = {
          type: 'bug',
          project_id: bug?.project_id,
          bug_id: params.bug_id
        };
        break;
      }
    case 'notify_new_chat_message':
      {
        const { data: project } = await supabaseAdmin.from('projects').select('name').eq('id', params.project_id).single();
        title = `${RLM}رسالة جديدة في "${project?.name}"`;
        body = `${RLM}${senderName}: ${params.message.substring(0, 50)}`;
        notificationType = 'chat';
        notificationData = {
          type: 'chat',
          project_id: params.project_id
        };
        break;
      }
    case 'notify_broadcast_from_member':
    case 'notify_broadcast':
      {
        title = RLM + (params.title ?? `رسالة من ${senderName}`);
        body = RLM + (params.message ?? `رسالة عامة للفريق`);
        notificationType = 'broadcast';
        notificationData = {
          type: 'broadcast',
          hub_id: hubId
        };
        break;
      }
    default:
      return new Response(JSON.stringify({
        success: false,
        message: 'Unknown function name'
      }), {
        headers: {
          'Content-Type': 'application/json'
        }
      });
  }
  const { data: membersToNotify } = await supabaseAdmin.from('hub_members').select('user_id').eq('hub_id', hubId).neq('user_id', userIdToExclude);
  const potentialRecipientIds = membersToNotify?.map((m)=>m.user_id) ?? [];
  if (potentialRecipientIds.length === 0) {
    return new Response(JSON.stringify({
      success: true,
      message: 'No recipients'
    }), {
      headers: {
        'Content-Type': 'application/json'
      }
    });
  }
  const { data: disabledAllPrefs } = await supabaseAdmin.from('notification_preferences').select('user_id').in('user_id', potentialRecipientIds).eq('notification_type', 'all').eq('is_enabled', false);
  const usersWithAllDisabled = disabledAllPrefs?.map((p)=>p.user_id) ?? [];
  let finalRecipientIds = potentialRecipientIds.filter((id)=>!usersWithAllDisabled.includes(id));
  const { data: disabledTypePrefs } = await supabaseAdmin.from('notification_preferences').select('user_id').in('user_id', finalRecipientIds).eq('notification_type', notificationType).eq('is_enabled', false);
  const usersWithTypeDisabled = disabledTypePrefs?.map((p)=>p.user_id) ?? [];
  finalRecipientIds = finalRecipientIds.filter((id)=>!usersWithTypeDisabled.includes(id));
  if (projectIdForFiltering) {
    const { data: disabledProjectPrefs } = await supabaseAdmin.from('notification_preferences').select('user_id').in('user_id', finalRecipientIds).eq('notification_type', 'project_specific').eq('project_id', projectIdForFiltering).eq('is_enabled', false);
    const usersWithProjectDisabled = disabledProjectPrefs?.map((p)=>p.user_id) ?? [];
    finalRecipientIds = finalRecipientIds.filter((id)=>!usersWithProjectDisabled.includes(id));
  }
  let tokens = [];
  if (finalRecipientIds.length > 0) {
    const { data: devices } = await supabaseAdmin.from('user_devices').select('device_token').in('user_id', finalRecipientIds);
    tokens = devices?.map((d)=>d.device_token).filter((t)=>t) ?? [];
  }
  await sendFcmNotification(tokens, title, body, notificationData);
  return new Response(JSON.stringify({
    success: true
  }), {
    headers: {
      'Content-Type': 'application/json'
    }
  });
});
